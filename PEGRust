Expression :
      ExpressionWithoutBlock
   | ExpressionWithBlock

ExpressionWithoutBlock :
   OuterAttribute*†
   (
         LiteralExpression
      | PathExpression
      | OperatorExpression
      | GroupedExpression
      | ArrayExpression
      | AwaitExpression
      | IndexExpression
      | TupleExpression
      | TupleIndexingExpression
      | StructExpression
      | EnumerationVariantExpression
      | CallExpression
      | MethodCallExpression
      | FieldExpression
      | ClosureExpression
      | ContinueExpression
      | BreakExpression
      | RangeExpression
      | ReturnExpression
      | MacroInvocation
   )

ExpressionWithBlock :
   OuterAttribute*†
   (
         BlockExpression
      | AsyncBlockExpression
      | UnsafeBlockExpression
      | LoopExpression
      | IfExpression
      | IfLetExpression
      | MatchExpression
   )

   LiteralExpression :
      CHAR_LITERAL
   | STRING_LITERAL
   | RAW_STRING_LITERAL
   | BYTE_LITERAL
   | BYTE_STRING_LITERAL
   | RAW_BYTE_STRING_LITERAL
   | INTEGER_LITERAL
   | FLOAT_LITERAL
   | BOOLEAN_LITERAL

------------
   PathExpression :
      PathInExpression
   | QualifiedPathInExpression

----------
 OperatorExpression :
      BorrowExpression
   | DereferenceExpression
   | ErrorPropagationExpression
   | NegationExpression
   | ArithmeticOrLogicalExpression
   | ComparisonExpression
   | LazyBooleanExpression
   | TypeCastExpression
   | AssignmentExpression
   | CompoundAssignmentExpression

   ----------------
GroupedExpression :
   ( InnerAttribute* Expression )

--------
ArrayExpression :
   [ InnerAttribute* ArrayElements? ]

ArrayElements :
      Expression ( , Expression )* ,?
   | Expression ; Expression

--------------
TupleExpression :
   ( InnerAttribute* TupleElements? )

TupleElements :
   ( Expression , )+ Expression?

------------
StructExpression :
      StructExprStruct
   | StructExprTuple
   | StructExprUnit

StructExprStruct :
   PathInExpression { InnerAttribute* (StructExprFields | StructBase)? }

StructExprFields :
   StructExprField (, StructExprField)* (, StructBase | ,?)

StructExprField :
      IDENTIFIER
   | (IDENTIFIER | TUPLE_INDEX) : Expression

StructBase :
   .. Expression

StructExprTuple :
   PathInExpression (
      InnerAttribute*
      ( Expression (, Expression)* ,? )?
   )

StructExprUnit : PathInExpression
----------
EnumerationVariantExpression :
      EnumExprStruct
   | EnumExprTuple
   | EnumExprFieldless

EnumExprStruct :
   PathInExpression { EnumExprFields? }

EnumExprFields :
      EnumExprField (, EnumExprField)* ,?

EnumExprField :
      IDENTIFIER
   | (IDENTIFIER | TUPLE_INDEX) : Expression

EnumExprTuple :
   PathInExpression (
      ( Expression (, Expression)* ,? )?
   )

EnumExprFieldless : PathInExpression
--------
CallExpression :
   Expression ( CallParams? )

CallParams :
   Expression ( , Expression )* ,?

---------
MethodCallExpression :
   Expression . PathExprSegment (CallParams? )

--------
FieldExpression :
   Expression . IDENTIFIER

--------
ClosureExpression :
   move?
   ( || | | ClosureParameters? | )
   (Expression | -> TypeNoBounds BlockExpression)

ClosureParameters :
   ClosureParam (, ClosureParam)* ,?

ClosureParam :
   OuterAttribute* Pattern ( : Type )?

-----------
ContinueExpression :
   continue LIFETIME_OR_LABEL?
------------
BreakExpression :
   break LIFETIME_OR_LABEL? Expression?      

----------
LoopExpression :
   LoopLabel? (
         InfiniteLoopExpression
      | PredicateLoopExpression
      | PredicatePatternLoopExpression
      | IteratorLoopExpression
   )
----------         
RangeExpression :
      RangeExpr
   | RangeFromExpr
   | RangeToExpr
   | RangeFullExpr
   | RangeInclusiveExpr
   | RangeToInclusiveExpr

RangeExpr :
   Expression .. Expression

RangeFromExpr :
   Expression ..

RangeToExpr :
   .. Expression

RangeFullExpr :
   ..

RangeInclusiveExpr :
   Expression ..= Expression

RangeToInclusiveExpr :
   ..= Expression

---------
 IfExpression :
   if Expressionexceptstruct expression BlockExpression
   (else ( BlockExpression | IfExpression | IfLetExpression ) )?

----------
MatchExpression :
   match Expressionexceptstruct expression {
      InnerAttribute*
      MatchArms?
   }

MatchArms :
   ( MatchArm => ( ExpressionWithoutBlock , | ExpressionWithBlock ,? ) )*
   MatchArm => Expression ,?

MatchArm :
   OuterAttribute* MatchArmPatterns MatchArmGuard?

MatchArmPatterns :
   |? Pattern ( | Pattern )*

MatchArmGuard :
   if Expression

   ------------------
MacroInvocation :
   SimplePath ! DelimTokenTree

DelimTokenTree :
      ( TokenTree* )
   | [ TokenTree* ]
   | { TokenTree* }

TokenTree :
   Tokenexcept delimiters | DelimTokenTree

MacroInvocationSemi :
      SimplePath ! ( TokenTree* ) ;
   | SimplePath ! [ TokenTree* ] ;
   | SimplePath ! { TokenTree* }

-----------
ReturnExpression :
   return Expression?   




