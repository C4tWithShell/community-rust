[
  {
    "key": "clippy::absolute_paths",
    "name": "Checks for usage of items through absolute paths, like `std::env::current_dir`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths"
  },
  {
    "key": "clippy::absurd_extreme_comparisons",
    "name": "Checks for comparisons where one side of the relation is either the minimum or maximum value for its",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons"
  },
  {
    "key": "clippy::alloc_instead_of_core",
    "name": "Finds items imported through `alloc` when available through `core`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#alloc_instead_of_core"
  },
  {
    "key": "clippy::allow_attributes",
    "name": "Checks for usage of the `#[allow]` attribute and suggests replacing it with the `#[expect]` (See [RF",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes"
  },
  {
    "key": "clippy::allow_attributes_without_reason",
    "name": "Checks for attributes that allow lints without a reason.  (This requires the `lint_reasons` feature)",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason"
  },
  {
    "key": "clippy::almost_complete_range",
    "name": "Checks for ranges which almost include the entire range of letters from 'a' to 'z' or digits from '0",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_range"
  },
  {
    "key": "clippy::almost_swapped",
    "name": "Checks for `foo = bar; bar = foo` sequences.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped"
  },
  {
    "key": "clippy::approx_constant",
    "name": "Checks for floating point literals that approximate constants which are defined in [`std::f32::const",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant"
  },
  {
    "key": "clippy::arc_with_non_send_sync",
    "name": "This lint warns when you use `Arc` with a type that does not implement `Send` or `Sync`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#arc_with_non_send_sync"
  },
  {
    "key": "clippy::arithmetic_side_effects",
    "name": "Checks any kind of arithmetic operation of any type.  Operators like `+`, `-`, `*` or `<<` are usual",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects"
  },
  {
    "key": "clippy::as_conversions",
    "name": "Checks for usage of `as` conversions.  Note that this lint is specialized in linting *every single*",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions"
  },
  {
    "key": "clippy::as_ptr_cast_mut",
    "name": "Checks for the result of a `&self`-taking `as_ptr` being cast to a mutable pointer",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#as_ptr_cast_mut"
  },
  {
    "key": "clippy::as_underscore",
    "name": "Checks for the usage of `as _` conversion using inferred type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#as_underscore"
  },
  {
    "key": "clippy::assertions_on_constants",
    "name": "Checks for `assert!(true)` and `assert!(false)` calls.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants"
  },
  {
    "key": "clippy::assertions_on_result_states",
    "name": "Checks for `assert!(r.is_ok())` or `assert!(r.is_err())` calls.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_result_states"
  },
  {
    "key": "clippy::assign_op_pattern",
    "name": "Checks for `a = a op b` or `a = b commutative_op a` patterns.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern"
  },
  {
    "key": "clippy::assigning_clones",
    "name": "Checks for code like `foo = bar.clone();`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones"
  },
  {
    "key": "clippy::async_yields_async",
    "name": "Checks for async blocks that yield values of types that can themselves be awaited.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#async_yields_async"
  },
  {
    "key": "clippy::await_holding_invalid_type",
    "name": "Allows users to configure types which should not be held across `await` suspension points.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_invalid_type"
  },
  {
    "key": "clippy::await_holding_lock",
    "name": "Checks for calls to await while holding a non-async-aware MutexGuard.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock"
  },
  {
    "key": "clippy::await_holding_refcell_ref",
    "name": "Checks for calls to await while holding a `RefCell` `Ref` or `RefMut`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_refcell_ref"
  },
  {
    "key": "clippy::bad_bit_mask",
    "name": "Checks for incompatible bit masks in comparisons.  The formula for detecting if an expression of the",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask"
  },
  {
    "key": "clippy::big_endian_bytes",
    "name": "Checks for the usage of the `to_be_bytes` method and/or the function `from_be_bytes`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#big_endian_bytes"
  },
  {
    "key": "clippy::bind_instead_of_map",
    "name": "Checks for usage of `_.and_then(|x| Some(y))`, `_.and_then(|x| Ok(y))` or `_.or_else(|x| Err(y))`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#bind_instead_of_map"
  },
  {
    "key": "clippy::blanket_clippy_restriction_lints",
    "name": "Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints"
  },
  {
    "key": "clippy::blocks_in_conditions",
    "name": "Checks for `if` and `match` conditions that use blocks containing an expression, statements or condi",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_conditions"
  },
  {
    "key": "clippy::bool_assert_comparison",
    "name": "This lint warns about boolean comparisons in assert-like macros.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison"
  },
  {
    "key": "clippy::bool_comparison",
    "name": "Checks for expressions of the form `x == true`, `x != true` and order comparisons such as `x < true`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison"
  },
  {
    "key": "clippy::bool_to_int_with_if",
    "name": "Instead of using an if statement to convert a bool to an int, this lint suggests using a `from()` fu",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if"
  },
  {
    "key": "clippy::borrow_as_ptr",
    "name": "Checks for the usage of `&expr as *const T` or `&mut expr as *mut T`, and suggest using `ptr::addr_o",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr"
  },
  {
    "key": "clippy::borrow_deref_ref",
    "name": "Checks for `&*(&T)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref"
  },
  {
    "key": "clippy::borrow_interior_mutable_const",
    "name": "Checks if `const` items which is interior mutable (e.g., contains a `Cell`, `Mutex`, `AtomicXxxx`, e",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const"
  },
  {
    "key": "clippy::borrowed_box",
    "name": "Checks for usage of `&Box<T>` anywhere in the code. Check the [Box documentation](https://doc.rust-l",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box"
  },
  {
    "key": "clippy::box_collection",
    "name": "Checks for usage of `Box<T>` where T is a collection such as Vec anywhere in the code. Check the [Bo",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#box_collection"
  },
  {
    "key": "clippy::box_default",
    "name": "checks for `Box::new(T::default())`, which is better written as `Box::<T>::default()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#box_default"
  },
  {
    "key": "clippy::boxed_local",
    "name": "Checks for usage of `Box<T>` where an unboxed `T` would work fine.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local"
  },
  {
    "key": "clippy::branches_sharing_code",
    "name": "Checks if the `if` and `else` block contain shared code that can be moved out of the blocks.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code"
  },
  {
    "key": "clippy::builtin_type_shadow",
    "name": "Warns if a generic shadows a built-in type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#builtin_type_shadow"
  },
  {
    "key": "clippy::bytes_count_to_len",
    "name": "It checks for `str::bytes().count()` and suggests replacing it with `str::len()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#bytes_count_to_len"
  },
  {
    "key": "clippy::bytes_nth",
    "name": "Checks for the use of `.bytes().nth()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth"
  },
  {
    "key": "clippy::cargo_common_metadata",
    "name": "Checks to see if all common metadata is defined in `Cargo.toml`. See: https://rust-lang-nursery.gith",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata"
  },
  {
    "key": "clippy::case_sensitive_file_extension_comparisons",
    "name": "Checks for calls to `ends_with` with possible file extensions and suggests to use a case-insensitive",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons"
  },
  {
    "key": "clippy::cast_abs_to_unsigned",
    "name": "Checks for usage of the `abs()` method that cast the result to unsigned.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_abs_to_unsigned"
  },
  {
    "key": "clippy::cast_enum_constructor",
    "name": "Checks for casts from an enum tuple constructor to an integer.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_constructor"
  },
  {
    "key": "clippy::cast_enum_truncation",
    "name": "Checks for casts from an enum type to an integral type which will definitely truncate the value.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_truncation"
  },
  {
    "key": "clippy::cast_lossless",
    "name": "Checks for casts between numerical types that may be replaced by safe conversion functions.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless"
  },
  {
    "key": "clippy::cast_nan_to_int",
    "name": "Checks for a known NaN float being cast to an integer",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_nan_to_int"
  },
  {
    "key": "clippy::cast_possible_truncation",
    "name": "Checks for casts between numerical types that may truncate large values. This is expected behavior,",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation"
  },
  {
    "key": "clippy::cast_possible_wrap",
    "name": "Checks for casts from an unsigned type to a signed type of the same size, or possibly smaller due to",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap"
  },
  {
    "key": "clippy::cast_precision_loss",
    "name": "Checks for casts from any numerical to a float type where the receiving type cannot store all values",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss"
  },
  {
    "key": "clippy::cast_ptr_alignment",
    "name": "Checks for casts, using `as` or `pointer::cast`, from a less-strictly-aligned pointer to a more-stri",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_ptr_alignment"
  },
  {
    "key": "clippy::cast_sign_loss",
    "name": "Checks for casts from a signed to an unsigned numerical type. In this case, negative values wrap aro",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss"
  },
  {
    "key": "clippy::cast_slice_different_sizes",
    "name": "Checks for `as` casts between raw pointers to slices with differently sized elements.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_slice_different_sizes"
  },
  {
    "key": "clippy::cast_slice_from_raw_parts",
    "name": "Checks for a raw slice being cast to a slice pointer",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cast_slice_from_raw_parts"
  },
  {
    "key": "clippy::char_lit_as_u8",
    "name": "Checks for expressions where a character literal is cast to `u8` and suggests using a byte literal i",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8"
  },
  {
    "key": "clippy::chars_last_cmp",
    "name": "Checks for usage of `_.chars().last()` or `_.chars().next_back()` on a `str` to check if it ends wit",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#chars_last_cmp"
  },
  {
    "key": "clippy::chars_next_cmp",
    "name": "Checks for usage of `.chars().next()` on a `str` to check if it starts with a given char.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp"
  },
  {
    "key": "clippy::checked_conversions",
    "name": "Checks for explicit bounds checking when casting.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#checked_conversions"
  },
  {
    "key": "clippy::clear_with_drain",
    "name": "Checks for usage of `.drain(..)` for the sole purpose of clearing a container.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#clear_with_drain"
  },
  {
    "key": "clippy::clone_on_copy",
    "name": "Checks for usage of `.clone()` on a `Copy` type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy"
  },
  {
    "key": "clippy::clone_on_ref_ptr",
    "name": "Checks for usage of `.clone()` on a ref-counted pointer, (`Rc`, `Arc`, `rc::Weak`, or `sync::Weak`),",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_ref_ptr"
  },
  {
    "key": "clippy::cloned_instead_of_copied",
    "name": "Checks for usage of `cloned()` on an `Iterator` or `Option` where `copied()` could be used instead.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied"
  },
  {
    "key": "clippy::cmp_null",
    "name": "This lint checks for equality comparisons with `ptr::null`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cmp_null"
  },
  {
    "key": "clippy::cmp_owned",
    "name": "Checks for conversions to owned values just for the sake of a comparison.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned"
  },
  {
    "key": "clippy::cognitive_complexity",
    "name": "Checks for methods with high cognitive complexity.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity"
  },
  {
    "key": "clippy::collapsible_else_if",
    "name": "Checks for collapsible `else { if ... }` expressions that can be collapsed to `else if ...`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if"
  },
  {
    "key": "clippy::collapsible_if",
    "name": "Checks for nested `if` statements which can be collapsed by `&&`-combining their conditions.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if"
  },
  {
    "key": "clippy::collapsible_match",
    "name": "Finds nested `match` or `if let` expressions where the patterns may be \"collapsed\" together without",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match"
  },
  {
    "key": "clippy::collapsible_str_replace",
    "name": "Checks for consecutive calls to `str::replace` (2 or more) that can be collapsed into a single call.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_str_replace"
  },
  {
    "key": "clippy::collection_is_never_read",
    "name": "Checks for collections that are never queried.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#collection_is_never_read"
  },
  {
    "key": "clippy::comparison_chain",
    "name": "Checks comparison chains written with `if` that can be rewritten with `match` and `cmp`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain"
  },
  {
    "key": "clippy::comparison_to_empty",
    "name": "Checks for comparing to an empty slice such as `\"\"` or `[]`, and suggests using `.is_empty()` where",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty"
  },
  {
    "key": "clippy::const_is_empty",
    "name": "It identifies calls to `.is_empty()` on constant values.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#const_is_empty"
  },
  {
    "key": "clippy::copy_iterator",
    "name": "Checks for types that implement `Copy` as well as `Iterator`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator"
  },
  {
    "key": "clippy::crate_in_macro_def",
    "name": "Checks for usage of `crate` as opposed to `$crate` in a macro definition.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#crate_in_macro_def"
  },
  {
    "key": "clippy::create_dir",
    "name": "Checks usage of `std::fs::create_dir` and suggest using `std::fs::create_dir_all` instead.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#create_dir"
  },
  {
    "key": "clippy::crosspointer_transmute",
    "name": "Checks for transmutes between a type `T` and `*T`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute"
  },
  {
    "key": "clippy::dbg_macro",
    "name": "Checks for usage of the [`dbg!`](https://doc.rust-lang.org/std/macro.dbg.html) macro.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro"
  },
  {
    "key": "clippy::debug_assert_with_mut_call",
    "name": "Checks for function/method calls with a mutable parameter in `debug_assert!`, `debug_assert_eq!` and",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#debug_assert_with_mut_call"
  },
  {
    "key": "clippy::decimal_literal_representation",
    "name": "Warns if there is a better representation for a numeric literal.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation"
  },
  {
    "key": "clippy::declare_interior_mutable_const",
    "name": "Checks for declaration of `const` items which is interior mutable (e.g., contains a `Cell`, `Mutex`,",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const"
  },
  {
    "key": "clippy::default_constructed_unit_structs",
    "name": "Checks for construction on unit struct using `default`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#default_constructed_unit_structs"
  },
  {
    "key": "clippy::default_instead_of_iter_empty",
    "name": "It checks for `std::iter::Empty::default()` and suggests replacing it with `std::iter::empty()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#default_instead_of_iter_empty"
  },
  {
    "key": "clippy::default_numeric_fallback",
    "name": "Checks for usage of unconstrained numeric literals which may cause default numeric fallback in type",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback"
  },
  {
    "key": "clippy::default_trait_access",
    "name": "Checks for literal calls to `Default::default()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access"
  },
  {
    "key": "clippy::default_union_representation",
    "name": "Displays a warning when a union is declared with the default representation (without a `#[repr(C)]`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#default_union_representation"
  },
  {
    "key": "clippy::deprecated_cfg_attr",
    "name": "Checks for `#[cfg_attr(rustfmt, rustfmt_skip)]` and suggests to replace it with `#[rustfmt::skip]`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr"
  },
  {
    "key": "clippy::deprecated_clippy_cfg_attr",
    "name": "Checks for `#[cfg_attr(feature = \"cargo-clippy\", ...)]` and for `#[cfg(feature = \"cargo-clippy\")]` a",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_clippy_cfg_attr"
  },
  {
    "key": "clippy::deprecated_semver",
    "name": "Checks for `#[deprecated]` annotations with a `since` field that is not a valid semantic version. Al",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_semver"
  },
  {
    "key": "clippy::deref_addrof",
    "name": "Checks for usage of `*&` and `*&mut` in expressions.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof"
  },
  {
    "key": "clippy::deref_by_slicing",
    "name": "Checks for slicing expressions which are equivalent to dereferencing the value.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#deref_by_slicing"
  },
  {
    "key": "clippy::derivable_impls",
    "name": "Detects manual `std::default::Default` implementations that are identical to a derived implementatio",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls"
  },
  {
    "key": "clippy::derive_ord_xor_partial_ord",
    "name": "Lints against manual `PartialOrd` and `Ord` implementations for types with a derived `Ord` or `Parti",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord"
  },
  {
    "key": "clippy::derive_partial_eq_without_eq",
    "name": "Checks for types that derive `PartialEq` and could implement `Eq`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq"
  },
  {
    "key": "clippy::derived_hash_with_manual_eq",
    "name": "Lints against manual `PartialEq` implementations for types with a derived `Hash` implementation.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#derived_hash_with_manual_eq"
  },
  {
    "key": "clippy::disallowed_macros",
    "name": "Denies the configured macros in clippy.toml  Note: Even though this lint is warn-by-default, it will",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_macros"
  },
  {
    "key": "clippy::disallowed_methods",
    "name": "Denies the configured methods and functions in clippy.toml  Note: Even though this lint is warn-by-d",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods"
  },
  {
    "key": "clippy::disallowed_names",
    "name": "Checks for usage of disallowed names for variables, such as `foo`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names"
  },
  {
    "key": "clippy::disallowed_script_idents",
    "name": "Checks for usage of unicode scripts other than those explicitly allowed by the lint config.  This li",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents"
  },
  {
    "key": "clippy::disallowed_types",
    "name": "Denies the configured types in clippy.toml.  Note: Even though this lint is warn-by-default, it will",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types"
  },
  {
    "key": "clippy::diverging_sub_expression",
    "name": "Checks for diverging calls that are not match arms or statements.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression"
  },
  {
    "key": "clippy::doc_link_with_quotes",
    "name": "Detects the syntax `['foo']` in documentation comments (notice quotes instead of backticks) outside",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes"
  },
  {
    "key": "clippy::doc_markdown",
    "name": "Checks for the presence of `_`, `::` or camel-case words outside ticks in documentation.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown"
  },
  {
    "key": "clippy::double_comparisons",
    "name": "Checks for double comparisons that could be simplified to a single expression.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons"
  },
  {
    "key": "clippy::double_must_use",
    "name": "Checks for a `#[must_use]` attribute without further information on functions and methods that retur",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#double_must_use"
  },
  {
    "key": "clippy::double_neg",
    "name": "Detects expressions of the form `--x`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#double_neg"
  },
  {
    "key": "clippy::double_parens",
    "name": "Checks for unnecessary double parentheses.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#double_parens"
  },
  {
    "key": "clippy::drain_collect",
    "name": "Checks for calls to `.drain()` that clear the collection, immediately followed by a call to `.collec",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#drain_collect"
  },
  {
    "key": "clippy::drop_non_drop",
    "name": "Checks for calls to `std::mem::drop` with a value that does not implement `Drop`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#drop_non_drop"
  },
  {
    "key": "clippy::duplicate_mod",
    "name": "Checks for files that are included as modules multiple times.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_mod"
  },
  {
    "key": "clippy::duplicate_underscore_argument",
    "name": "Checks for function arguments having the similar names differing by an underscore.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_underscore_argument"
  },
  {
    "key": "clippy::duplicated_attributes",
    "name": "Checks for attributes that appear two or more times.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#duplicated_attributes"
  },
  {
    "key": "clippy::duration_subsec",
    "name": "Checks for calculation of subsecond microseconds or milliseconds from other `Duration` methods.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#duration_subsec"
  },
  {
    "key": "clippy::eager_transmute",
    "name": "Checks for integer validity checks, followed by a transmute that is (incorrectly) evaluated eagerly",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#eager_transmute"
  },
  {
    "key": "clippy::else_if_without_else",
    "name": "Checks for usage of if expressions with an `else if` branch, but without a final `else` branch.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else"
  },
  {
    "key": "clippy::empty_docs",
    "name": "Detects documentation that is empty.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#empty_docs"
  },
  {
    "key": "clippy::empty_drop",
    "name": "Checks for empty `Drop` implementations.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#empty_drop"
  },
  {
    "key": "clippy::empty_enum",
    "name": "Checks for `enum`s with no variants.  As of this writing, the `never_type` is still a nightly-only e",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#empty_enum"
  },
  {
    "key": "clippy::empty_enum_variants_with_brackets",
    "name": "Finds enum variants without fields that are declared with empty brackets.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#empty_enum_variants_with_brackets"
  },
  {
    "key": "clippy::empty_line_after_doc_comments",
    "name": "Checks for empty lines after documentation comments.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments"
  },
  {
    "key": "clippy::empty_line_after_outer_attr",
    "name": "Checks for empty lines after outer attributes",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr"
  },
  {
    "key": "clippy::empty_loop",
    "name": "Checks for empty `loop` expressions.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop"
  },
  {
    "key": "clippy::empty_structs_with_brackets",
    "name": "Finds structs without fields (a so-called \"empty struct\") that are declared with brackets.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#empty_structs_with_brackets"
  },
  {
    "key": "clippy::enum_clike_unportable_variant",
    "name": "Checks for C-like enumerations that are `repr(isize/usize)` and have values that don't fit into an `",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#enum_clike_unportable_variant"
  },
  {
    "key": "clippy::enum_glob_use",
    "name": "Checks for `use Enum::*`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#enum_glob_use"
  },
  {
    "key": "clippy::enum_variant_names",
    "name": "Detects enumeration variants that are prefixed or suffixed by the same characters.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names"
  },
  {
    "key": "clippy::eq_op",
    "name": "Checks for equal operands to comparison, logical and bitwise, difference and division binary operato",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#eq_op"
  },
  {
    "key": "clippy::equatable_if_let",
    "name": "Checks for pattern matchings that can be expressed using equality.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#equatable_if_let"
  },
  {
    "key": "clippy::erasing_op",
    "name": "Checks for erasing operations, e.g., `x * 0`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op"
  },
  {
    "key": "clippy::err_expect",
    "name": "Checks for `.err().expect()` calls on the `Result` type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#err_expect"
  },
  {
    "key": "clippy::error_impl_error",
    "name": "Checks for types named `Error` that implement `Error`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#error_impl_error"
  },
  {
    "key": "clippy::excessive_nesting",
    "name": "Checks for blocks which are nested beyond a certain threshold.  Note: Even though this lint is warn-",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#excessive_nesting"
  },
  {
    "key": "clippy::excessive_precision",
    "name": "Checks for float literals with a precision greater than that supported by the underlying type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision"
  },
  {
    "key": "clippy::exhaustive_enums",
    "name": "Warns on any exported `enum`s that are not tagged `#[non_exhaustive]`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums"
  },
  {
    "key": "clippy::exhaustive_structs",
    "name": "Warns on any exported `struct`s that are not tagged `#[non_exhaustive]`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs"
  },
  {
    "key": "clippy::exit",
    "name": "Detects calls to the `exit()` function which terminates the program.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#exit"
  },
  {
    "key": "clippy::expect_fun_call",
    "name": "Checks for calls to `.expect(&format!(...))`, `.expect(foo(..))`, etc., and suggests to use `unwrap_",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call"
  },
  {
    "key": "clippy::expect_used",
    "name": "Checks for `.expect()` or `.expect_err()` calls on `Result`s and `.expect()` call on `Option`s.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#expect_used"
  },
  {
    "key": "clippy::expl_impl_clone_on_copy",
    "name": "Checks for explicit `Clone` implementations for `Copy` types.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy"
  },
  {
    "key": "clippy::explicit_auto_deref",
    "name": "Checks for dereferencing expressions which would be covered by auto-deref.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref"
  },
  {
    "key": "clippy::explicit_counter_loop",
    "name": "Checks `for` loops over slices with an explicit counter and suggests the use of `.enumerate()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop"
  },
  {
    "key": "clippy::explicit_deref_methods",
    "name": "Checks for explicit `deref()` or `deref_mut()` method calls.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_methods"
  },
  {
    "key": "clippy::explicit_into_iter_loop",
    "name": "Checks for loops on `y.into_iter()` where `y` will do, and suggests the latter.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#explicit_into_iter_loop"
  },
  {
    "key": "clippy::explicit_iter_loop",
    "name": "Checks for loops on `x.iter()` where `&x` will do, and suggests the latter.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop"
  },
  {
    "key": "clippy::explicit_write",
    "name": "Checks for usage of `write!()` / `writeln()!` which can be replaced with `(e)print!()` / `(e)println",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#explicit_write"
  },
  {
    "key": "clippy::extend_with_drain",
    "name": "Checks for occurrences where one vector gets extended instead of append",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#extend_with_drain"
  },
  {
    "key": "clippy::extra_unused_lifetimes",
    "name": "Checks for lifetimes in generics that are never used anywhere else.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes"
  },
  {
    "key": "clippy::extra_unused_type_parameters",
    "name": "Checks for type parameters in generics that are never used anywhere else.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters"
  },
  {
    "key": "clippy::fallible_impl_from",
    "name": "Checks for impls of `From<..>` that contain `panic!()` or `unwrap()`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#fallible_impl_from"
  },
  {
    "key": "clippy::field_reassign_with_default",
    "name": "Checks for immediate reassignment of fields initialized with Default::default().",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#field_reassign_with_default"
  },
  {
    "key": "clippy::filetype_is_file",
    "name": "Checks for `FileType::is_file()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#filetype_is_file"
  },
  {
    "key": "clippy::filter_map_bool_then",
    "name": "Checks for usage of `bool::then` in `Iterator::filter_map`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_bool_then"
  },
  {
    "key": "clippy::filter_map_identity",
    "name": "Checks for usage of `filter_map(|x| x)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_identity"
  },
  {
    "key": "clippy::filter_map_next",
    "name": "Checks for usage of `_.filter_map(_).next()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next"
  },
  {
    "key": "clippy::filter_next",
    "name": "Checks for usage of `_.filter(_).next()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#filter_next"
  },
  {
    "key": "clippy::flat_map_identity",
    "name": "Checks for usage of `flat_map(|x| x)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#flat_map_identity"
  },
  {
    "key": "clippy::flat_map_option",
    "name": "Checks for usage of `Iterator::flat_map()` where `filter_map()` could be used instead.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#flat_map_option"
  },
  {
    "key": "clippy::float_arithmetic",
    "name": "Checks for float arithmetic.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic"
  },
  {
    "key": "clippy::float_cmp",
    "name": "Checks for (in-)equality comparisons on floating-point values (apart from zero), except in functions",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp"
  },
  {
    "key": "clippy::float_cmp_const",
    "name": "Checks for (in-)equality comparisons on floating-point value and constant, except in functions calle",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const"
  },
  {
    "key": "clippy::float_equality_without_abs",
    "name": "Checks for statements of the form `(a - b) < f32::EPSILON` or `(a - b) < f64::EPSILON`. Notes the mi",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#float_equality_without_abs"
  },
  {
    "key": "clippy::fn_address_comparisons",
    "name": "Checks for comparisons with an address of a function item.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons"
  },
  {
    "key": "clippy::fn_params_excessive_bools",
    "name": "Checks for excessive use of bools in function definitions.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools"
  },
  {
    "key": "clippy::fn_to_numeric_cast",
    "name": "Checks for casts of function pointers to something other than usize",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast"
  },
  {
    "key": "clippy::fn_to_numeric_cast_any",
    "name": "Checks for casts of a function pointer to any integer type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_any"
  },
  {
    "key": "clippy::fn_to_numeric_cast_with_truncation",
    "name": "Checks for casts of a function pointer to a numeric type not wide enough to store address.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation"
  },
  {
    "key": "clippy::for_kv_map",
    "name": "Checks for iterating a map (`HashMap` or `BTreeMap`) and ignoring either the keys or values.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map"
  },
  {
    "key": "clippy::forget_non_drop",
    "name": "Checks for calls to `std::mem::forget` with a value that does not implement `Drop`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop"
  },
  {
    "key": "clippy::format_collect",
    "name": "Checks for usage of `.map(|_| format!(..)).collect::<String>()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#format_collect"
  },
  {
    "key": "clippy::format_in_format_args",
    "name": "Detects `format!` within the arguments of another macro that does formatting such as `format!` itsel",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args"
  },
  {
    "key": "clippy::format_push_string",
    "name": "Detects cases where the result of a `format!` call is appended to an existing `String`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string"
  },
  {
    "key": "clippy::four_forward_slashes",
    "name": "Checks for outer doc comments written with 4 forward slashes (`////`).",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#four_forward_slashes"
  },
  {
    "key": "clippy::from_iter_instead_of_collect",
    "name": "Checks for `from_iter()` function calls on types that implement the `FromIterator` trait.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect"
  },
  {
    "key": "clippy::from_over_into",
    "name": "Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into"
  },
  {
    "key": "clippy::from_raw_with_void_ptr",
    "name": "Checks if we're passing a `c_void` raw pointer to `{Box,Rc,Arc,Weak}::from_raw(_)`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#from_raw_with_void_ptr"
  },
  {
    "key": "clippy::from_str_radix_10",
    "name": "Checks for function invocations of the form `primitive::from_str_radix(s, 10)`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10"
  },
  {
    "key": "clippy::future_not_send",
    "name": "This lint requires Future implementations returned from functions and methods to implement the `Send",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send"
  },
  {
    "key": "clippy::get_first",
    "name": "Checks for usage of `x.get(0)` instead of `x.first()` or `x.front()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#get_first"
  },
  {
    "key": "clippy::get_last_with_len",
    "name": "Checks for usage of `x.get(x.len() - 1)` instead of `x.last()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len"
  },
  {
    "key": "clippy::get_unwrap",
    "name": "Checks for usage of `.get().unwrap()` (or `.get_mut().unwrap`) on a standard library type which impl",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap"
  },
  {
    "key": "clippy::host_endian_bytes",
    "name": "Checks for the usage of the `to_ne_bytes` method and/or the function `from_ne_bytes`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#host_endian_bytes"
  },
  {
    "key": "clippy::identity_op",
    "name": "Checks for identity operations, e.g., `x + 0`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#identity_op"
  },
  {
    "key": "clippy::if_let_mutex",
    "name": "Checks for `Mutex::lock` calls in `if let` expression with lock calls in any of the else blocks.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#if_let_mutex"
  },
  {
    "key": "clippy::if_not_else",
    "name": "Checks for usage of `!` or `!=` in an if condition with an else branch.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else"
  },
  {
    "key": "clippy::if_same_then_else",
    "name": "Checks for `if/else` with the same body as the *then* part and the *else* part.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else"
  },
  {
    "key": "clippy::if_then_some_else_none",
    "name": "Checks for if-else that could be written using either `bool::then` or `bool::then_some`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none"
  },
  {
    "key": "clippy::ifs_same_cond",
    "name": "Checks for consecutive `if`s with the same condition.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond"
  },
  {
    "key": "clippy::ignored_unit_patterns",
    "name": "Checks for usage of `_` in patterns of type `()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ignored_unit_patterns"
  },
  {
    "key": "clippy::impl_hash_borrow_with_str_and_bytes",
    "name": "This lint is concerned with the semantics of `Borrow` and `Hash` for a type that implements all thr",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#impl_hash_borrow_with_str_and_bytes"
  },
  {
    "key": "clippy::impl_trait_in_params",
    "name": "Lints when `impl Trait` is being used in a function's parameters.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params"
  },
  {
    "key": "clippy::implicit_clone",
    "name": "Checks for the usage of `_.to_owned()`, `vec.to_vec()`, or similar when calling `_.clone()` would be",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone"
  },
  {
    "key": "clippy::implicit_hasher",
    "name": "Checks for public `impl` or `fn` missing generalization over different hashers and implicitly defaul",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher"
  },
  {
    "key": "clippy::implicit_return",
    "name": "Checks for missing return statements at the end of a block.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return"
  },
  {
    "key": "clippy::implicit_saturating_add",
    "name": "Checks for implicit saturating addition.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_add"
  },
  {
    "key": "clippy::implicit_saturating_sub",
    "name": "Checks for implicit saturating subtraction.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_sub"
  },
  {
    "key": "clippy::implied_bounds_in_impls",
    "name": "Looks for bounds in `impl Trait` in return position that are implied by other bounds. This can happe",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#implied_bounds_in_impls"
  },
  {
    "key": "clippy::impossible_comparisons",
    "name": "Checks for double comparisons that can never succeed",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#impossible_comparisons"
  },
  {
    "key": "clippy::imprecise_flops",
    "name": "Looks for floating-point expressions that can be expressed using built-in methods to improve accurac",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#imprecise_flops"
  },
  {
    "key": "clippy::incompatible_msrv",
    "name": "This lint checks that no function newer than the defined MSRV (minimum supported rust version) is u",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv"
  },
  {
    "key": "clippy::inconsistent_digit_grouping",
    "name": "Warns if an integral or floating-point constant is grouped inconsistently with underscores.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping"
  },
  {
    "key": "clippy::inconsistent_struct_constructor",
    "name": "Checks for struct constructors where all fields are shorthand and the order of the field init shorth",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_struct_constructor"
  },
  {
    "key": "clippy::index_refutable_slice",
    "name": "The lint checks for slice bindings in patterns that are only used to access individual slice values.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice"
  },
  {
    "key": "clippy::indexing_slicing",
    "name": "Checks for usage of indexing or slicing. Arrays are special cases, this lint does report on arrays i",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing"
  },
  {
    "key": "clippy::ineffective_bit_mask",
    "name": "Checks for bit masks in comparisons which can be removed without changing the outcome. The basic str",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask"
  },
  {
    "key": "clippy::ineffective_open_options",
    "name": "Checks if both `.write(true)` and `.append(true)` methods are called on a same `OpenOptions`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_open_options"
  },
  {
    "key": "clippy::inefficient_to_string",
    "name": "Checks for usage of `.to_string()` on an `&&T` where `T` implements `ToString` directly (like `&&str",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string"
  },
  {
    "key": "clippy::infallible_destructuring_match",
    "name": "Checks for matches being used to destructure a single-variant enum or tuple struct where a `let` wil",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#infallible_destructuring_match"
  },
  {
    "key": "clippy::infinite_iter",
    "name": "Checks for iteration that is guaranteed to be infinite.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#infinite_iter"
  },
  {
    "key": "clippy::infinite_loop",
    "name": "Checks for infinite loops in a function where the return type is not `!` and lint accordingly.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#infinite_loop"
  },
  {
    "key": "clippy::inherent_to_string",
    "name": "Checks for the definition of inherent methods with a signature of `to_string(&self) -> String`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string"
  },
  {
    "key": "clippy::inherent_to_string_shadow_display",
    "name": "Checks for the definition of inherent methods with a signature of `to_string(&self) -> String` and i",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display"
  },
  {
    "key": "clippy::init_numbered_fields",
    "name": "Checks for tuple structs initialized with field syntax. It will however not lint if a base initializ",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#init_numbered_fields"
  },
  {
    "key": "clippy::inline_always",
    "name": "Checks for items annotated with `#[inline(always)]`, unless the annotated function is empty or simpl",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inline_always"
  },
  {
    "key": "clippy::inline_asm_x86_att_syntax",
    "name": "Checks for usage of AT&T x86 assembly syntax.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_att_syntax"
  },
  {
    "key": "clippy::inline_asm_x86_intel_syntax",
    "name": "Checks for usage of Intel x86 assembly syntax.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_intel_syntax"
  },
  {
    "key": "clippy::inline_fn_without_body",
    "name": "Checks for `#[inline]` on trait methods without bodies",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inline_fn_without_body"
  },
  {
    "key": "clippy::inspect_for_each",
    "name": "Checks for usage of `inspect().for_each()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#inspect_for_each"
  },
  {
    "key": "clippy::int_plus_one",
    "name": "Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#int_plus_one"
  },
  {
    "key": "clippy::integer_division",
    "name": "Checks for division of integers",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#integer_division"
  },
  {
    "key": "clippy::integer_division_remainder_used",
    "name": "Checks for the usage of division (/) and remainder (%) operations when performed on any integer type",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#integer_division_remainder_used"
  },
  {
    "key": "clippy::into_iter_on_ref",
    "name": "Checks for `into_iter` calls on references which should be replaced by `iter` or `iter_mut`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_ref"
  },
  {
    "key": "clippy::into_iter_without_iter",
    "name": "This is the opposite of the `iter_without_into_iter` lint. It looks for `IntoIterator for (&|&mut) T",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_without_iter"
  },
  {
    "key": "clippy::invalid_null_ptr_usage",
    "name": "This lint checks for invalid usages of `ptr::null`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#invalid_null_ptr_usage"
  },
  {
    "key": "clippy::invalid_regex",
    "name": "Checks [regex](https://crates.io/crates/regex) creation (with `Regex::new`, `RegexBuilder::new`, or",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex"
  },
  {
    "key": "clippy::invalid_upcast_comparisons",
    "name": "Checks for comparisons where the relation is always either true or false, but where one side has bee",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons"
  },
  {
    "key": "clippy::invisible_characters",
    "name": "Checks for invisible Unicode characters in the code.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters"
  },
  {
    "key": "clippy::is_digit_ascii_radix",
    "name": "Finds usages of [`char::is_digit`](https://doc.rust-lang.org/stable/std/primitive.char.html#method.i",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#is_digit_ascii_radix"
  },
  {
    "key": "clippy::items_after_statements",
    "name": "Checks for items declared after some statement in a block.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements"
  },
  {
    "key": "clippy::items_after_test_module",
    "name": "Triggers if an item is declared after the testing module marked with `#[cfg(test)]`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#items_after_test_module"
  },
  {
    "key": "clippy::iter_cloned_collect",
    "name": "Checks for the use of `.cloned().collect()` on slice to create a `Vec`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect"
  },
  {
    "key": "clippy::iter_count",
    "name": "Checks for the use of `.iter().count()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_count"
  },
  {
    "key": "clippy::iter_filter_is_ok",
    "name": "Checks for usage of `.filter(Result::is_ok)` that may be replaced with a `.flatten()` call. This lin",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_filter_is_ok"
  },
  {
    "key": "clippy::iter_filter_is_some",
    "name": "Checks for usage of `.filter(Option::is_some)` that may be replaced with a `.flatten()` call. This l",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_filter_is_some"
  },
  {
    "key": "clippy::iter_kv_map",
    "name": "Checks for iterating a map (`HashMap` or `BTreeMap`) and ignoring either the keys or values.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map"
  },
  {
    "key": "clippy::iter_next_loop",
    "name": "Checks for loops on `x.next()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop"
  },
  {
    "key": "clippy::iter_next_slice",
    "name": "Checks for usage of `iter().next()` on a Slice or an Array",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice"
  },
  {
    "key": "clippy::iter_not_returning_iterator",
    "name": "Detects methods named `iter` or `iter_mut` that do not have a return type that implements `Iterator`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_not_returning_iterator"
  },
  {
    "key": "clippy::iter_nth",
    "name": "Checks for usage of `.iter().nth()`/`.iter_mut().nth()` on standard library types that have equivale",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth"
  },
  {
    "key": "clippy::iter_nth_zero",
    "name": "Checks for the use of `iter.nth(0)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero"
  },
  {
    "key": "clippy::iter_on_empty_collections",
    "name": "Checks for calls to `iter`, `iter_mut` or `into_iter` on empty collections",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_on_empty_collections"
  },
  {
    "key": "clippy::iter_on_single_items",
    "name": "Checks for calls to `iter`, `iter_mut` or `into_iter` on collections containing a single item",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_on_single_items"
  },
  {
    "key": "clippy::iter_out_of_bounds",
    "name": "Looks for iterator combinator calls such as `.take(x)` or `.skip(x)` where `x` is greater than the a",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_out_of_bounds"
  },
  {
    "key": "clippy::iter_over_hash_type",
    "name": "This is a restriction lint which prevents the use of hash types (i.e., `HashSet` and `HashMap`) in f",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_over_hash_type"
  },
  {
    "key": "clippy::iter_overeager_cloned",
    "name": "Checks for usage of `_.cloned().<func>()` where call to `.cloned()` can be postponed.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_overeager_cloned"
  },
  {
    "key": "clippy::iter_skip_next",
    "name": "Checks for usage of `.skip(x).next()` on iterators.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next"
  },
  {
    "key": "clippy::iter_skip_zero",
    "name": "Checks for usage of `.skip(0)` on iterators.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_zero"
  },
  {
    "key": "clippy::iter_with_drain",
    "name": "Checks for usage of `.drain(..)` on `Vec` and `VecDeque` for iteration.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_with_drain"
  },
  {
    "key": "clippy::iter_without_into_iter",
    "name": "Looks for `iter` and `iter_mut` methods without an associated `IntoIterator for (&|&mut) Type` imple",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iter_without_into_iter"
  },
  {
    "key": "clippy::iterator_step_by_zero",
    "name": "Checks for calling `.step_by(0)` on iterators which panics.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero"
  },
  {
    "key": "clippy::join_absolute_paths",
    "name": "Checks for calls to `Path::join` that start with a path separator (`\\\\` or `/`).",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#join_absolute_paths"
  },
  {
    "key": "clippy::just_underscores_and_digits",
    "name": "Checks if you have variables whose name consists of just underscores and digits.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits"
  },
  {
    "key": "clippy::large_const_arrays",
    "name": "Checks for large `const` arrays that should be defined as `static` instead.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays"
  },
  {
    "key": "clippy::large_digit_groups",
    "name": "Warns if the digits of an integral or floating-point constant are grouped into groups that are too l",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups"
  },
  {
    "key": "clippy::large_enum_variant",
    "name": "Checks for large size differences between variants on `enum`s.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant"
  },
  {
    "key": "clippy::large_futures",
    "name": "It checks for the size of a `Future` created by `async fn` or `async {}`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#large_futures"
  },
  {
    "key": "clippy::large_include_file",
    "name": "Checks for the inclusion of large files via `include_bytes!()` and `include_str!()`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file"
  },
  {
    "key": "clippy::large_stack_arrays",
    "name": "Checks for local arrays that may be too large.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays"
  },
  {
    "key": "clippy::large_stack_frames",
    "name": "Checks for functions that use a lot of stack space.  This often happens when constructing a large ty",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_frames"
  },
  {
    "key": "clippy::large_types_passed_by_value",
    "name": "Checks for functions taking arguments by value, where the argument type is `Copy` and large enough t",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value"
  },
  {
    "key": "clippy::len_without_is_empty",
    "name": "Checks for items that implement `.len()` but not `.is_empty()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty"
  },
  {
    "key": "clippy::len_zero",
    "name": "Checks for getting the length of something via `.len()` just to compare to zero, and suggests using",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#len_zero"
  },
  {
    "key": "clippy::let_and_return",
    "name": "Checks for `let`-bindings, which are subsequently returned.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return"
  },
  {
    "key": "clippy::let_underscore_future",
    "name": "Checks for `let _ = <expr>` where the resulting type of expr implements `Future`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_future"
  },
  {
    "key": "clippy::let_underscore_lock",
    "name": "Checks for `let _ = sync_lock`. This supports `mutex` and `rwlock` in `parking_lot`. For `std` locks",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock"
  },
  {
    "key": "clippy::let_underscore_must_use",
    "name": "Checks for `let _ = <expr>` where expr is `#[must_use]`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use"
  },
  {
    "key": "clippy::let_underscore_untyped",
    "name": "Checks for `let _ = <expr>` without a type annotation, and suggests to either provide one, or remove",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_untyped"
  },
  {
    "key": "clippy::let_unit_value",
    "name": "Checks for binding a unit value.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value"
  },
  {
    "key": "clippy::let_with_type_underscore",
    "name": "Detects when a variable is declared with an explicit type of `_`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#let_with_type_underscore"
  },
  {
    "key": "clippy::lines_filter_map_ok",
    "name": "Checks for usage of `lines.filter_map(Result::ok)` or `lines.flat_map(Result::ok)` when `lines` has",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#lines_filter_map_ok"
  },
  {
    "key": "clippy::linkedlist",
    "name": "Checks for usage of any `LinkedList`, suggesting to use a `Vec` or a `VecDeque` (formerly called `Ri",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist"
  },
  {
    "key": "clippy::lint_groups_priority",
    "name": "Checks for lint groups with the same priority as lints in the `Cargo.toml` [`[lints]` table](https:/",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#lint_groups_priority"
  },
  {
    "key": "clippy::little_endian_bytes",
    "name": "Checks for the usage of the `to_le_bytes` method and/or the function `from_le_bytes`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#little_endian_bytes"
  },
  {
    "key": "clippy::lossy_float_literal",
    "name": "Checks for whole number float literals that cannot be represented as the underlying type without los",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal"
  },
  {
    "key": "clippy::macro_use_imports",
    "name": "Checks for `#[macro_use] use...`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#macro_use_imports"
  },
  {
    "key": "clippy::main_recursion",
    "name": "Checks for recursion using the entrypoint.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion"
  },
  {
    "key": "clippy::manual_assert",
    "name": "Detects `if`-then-`panic!` that can be replaced with `assert!`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert"
  },
  {
    "key": "clippy::manual_async_fn",
    "name": "It checks for manual implementations of `async` functions.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn"
  },
  {
    "key": "clippy::manual_bits",
    "name": "Checks for usage of `std::mem::size_of::<T>() * 8` when `T::BITS` is available.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits"
  },
  {
    "key": "clippy::manual_c_str_literals",
    "name": "Checks for the manual creation of C strings (a string with a `NUL` byte at the end), either through",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_c_str_literals"
  },
  {
    "key": "clippy::manual_clamp",
    "name": "Identifies good opportunities for a clamp function from std or core, and suggests using it.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp"
  },
  {
    "key": "clippy::manual_filter",
    "name": "Checks for usage of `match` which could be implemented using `filter`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter"
  },
  {
    "key": "clippy::manual_filter_map",
    "name": "Checks for usage of `_.filter(_).map(_)` that can be written more simply as `filter_map(_)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map"
  },
  {
    "key": "clippy::manual_find",
    "name": "Checks for manual implementations of Iterator::find",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_find"
  },
  {
    "key": "clippy::manual_find_map",
    "name": "Checks for usage of `_.find(_).map(_)` that can be written more simply as `find_map(_)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map"
  },
  {
    "key": "clippy::manual_flatten",
    "name": "Checks for unnecessary `if let` usage in a for loop where only the `Some` or `Ok` variant of the ite",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_flatten"
  },
  {
    "key": "clippy::manual_hash_one",
    "name": "Checks for cases where [`BuildHasher::hash_one`] can be used.  [`BuildHasher::hash_one`]: https://do",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_hash_one"
  },
  {
    "key": "clippy::manual_instant_elapsed",
    "name": "Lints subtraction between `Instant::now()` and another `Instant`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_instant_elapsed"
  },
  {
    "key": "clippy::manual_is_ascii_check",
    "name": "Suggests to use dedicated built-in methods, `is_ascii_(lowercase|uppercase|digit|hexdigit)` for chec",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_ascii_check"
  },
  {
    "key": "clippy::manual_is_finite",
    "name": "Checks for manual `is_finite` reimplementations (i.e., `x != <float>::INFINITY && x != <float>::NEG_",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_finite"
  },
  {
    "key": "clippy::manual_is_infinite",
    "name": "Checks for manual `is_infinite` reimplementations (i.e., `x == <float>::INFINITY || x == <float>::NE",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_infinite"
  },
  {
    "key": "clippy::manual_is_variant_and",
    "name": "Checks for usage of `option.map(f).unwrap_or_default()` and `result.map(f).unwrap_or_default()` wher",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_variant_and"
  },
  {
    "key": "clippy::manual_let_else",
    "name": "Warn of cases where `let...else` could be used",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else"
  },
  {
    "key": "clippy::manual_main_separator_str",
    "name": "Checks for references on `std::path::MAIN_SEPARATOR.to_string()` used to build a `&str`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_main_separator_str"
  },
  {
    "key": "clippy::manual_map",
    "name": "Checks for usage of `match` which could be implemented using `map`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_map"
  },
  {
    "key": "clippy::manual_memcpy",
    "name": "Checks for for-loops that manually copy items between slices that could be optimized by having a mem",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy"
  },
  {
    "key": "clippy::manual_next_back",
    "name": "Checks for `.rev().next()` on a `DoubleEndedIterator`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_next_back"
  },
  {
    "key": "clippy::manual_non_exhaustive",
    "name": "Checks for manual implementations of the non-exhaustive pattern.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive"
  },
  {
    "key": "clippy::manual_ok_or",
    "name": "Finds patterns that reimplement `Option::ok_or`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or"
  },
  {
    "key": "clippy::manual_range_contains",
    "name": "Checks for expressions like `x >= 3 && x < 8` that could be more readably expressed as `(3..8).conta",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains"
  },
  {
    "key": "clippy::manual_range_patterns",
    "name": "Looks for combined OR patterns that are all contained in a specific range, e.g. `6 | 4 | 5 | 9 | 7 |",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_patterns"
  },
  {
    "key": "clippy::manual_rem_euclid",
    "name": "Checks for an expression like `((x % 4) + 4) % 4` which is a common manual reimplementation of `x.re",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_rem_euclid"
  },
  {
    "key": "clippy::manual_retain",
    "name": "Checks for code to be replaced by `.retain()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_retain"
  },
  {
    "key": "clippy::manual_saturating_arithmetic",
    "name": "Checks for `.checked_add/sub(x).unwrap_or(MAX/MIN)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic"
  },
  {
    "key": "clippy::manual_slice_size_calculation",
    "name": "When `a` is `&[T]`, detect `a.len() * size_of::<T>()` and suggest `size_of_val(a)` instead.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation"
  },
  {
    "key": "clippy::manual_split_once",
    "name": "Checks for usage of `str::splitn(2, _)`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once"
  },
  {
    "key": "clippy::manual_str_repeat",
    "name": "Checks for manual implementations of `str::repeat`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat"
  },
  {
    "key": "clippy::manual_string_new",
    "name": "Checks for usage of `\"\"` to create a `String`, such as `\"\".to_string()`, `\"\".to_owned()`, `String::",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_string_new"
  },
  {
    "key": "clippy::manual_strip",
    "name": "Suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing using the pattern'",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip"
  },
  {
    "key": "clippy::manual_swap",
    "name": "Checks for manual swapping.  Note that the lint will not be emitted in const blocks, as the suggesti",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap"
  },
  {
    "key": "clippy::manual_try_fold",
    "name": "Checks for usage of `Iterator::fold` with a type that implements `Try`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_try_fold"
  },
  {
    "key": "clippy::manual_unwrap_or",
    "name": "Finds patterns that reimplement `Option::unwrap_or` or `Result::unwrap_or`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or"
  },
  {
    "key": "clippy::manual_unwrap_or_default",
    "name": "Checks if a `match` or `if let` expression can be simplified using `.unwrap_or_default()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or_default"
  },
  {
    "key": "clippy::manual_while_let_some",
    "name": "Looks for loops that check for emptiness of a `Vec` in the condition and pop an element in the body",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_while_let_some"
  },
  {
    "key": "clippy::many_single_char_names",
    "name": "Checks for too many variables whose name consists of a single character.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names"
  },
  {
    "key": "clippy::map_clone",
    "name": "Checks for usage of `map(|x| x.clone())` or dereferencing closures for `Copy` types, on `Iterator` o",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#map_clone"
  },
  {
    "key": "clippy::map_collect_result_unit",
    "name": "Checks for usage of `_.map(_).collect::<Result<(), _>()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#map_collect_result_unit"
  },
  {
    "key": "clippy::map_entry",
    "name": "Checks for usage of `contains_key` + `insert` on `HashMap` or `BTreeMap`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#map_entry"
  },
  {
    "key": "clippy::map_err_ignore",
    "name": "Checks for instances of `map_err(|_| Some::Enum)`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore"
  },
  {
    "key": "clippy::map_flatten",
    "name": "Checks for usage of `_.map(_).flatten(_)` on `Iterator` and `Option`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten"
  },
  {
    "key": "clippy::map_identity",
    "name": "Checks for instances of `map(f)` where `f` is the identity function.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#map_identity"
  },
  {
    "key": "clippy::map_unwrap_or",
    "name": "Checks for usage of `option.map(_).unwrap_or(_)` or `option.map(_).unwrap_or_else(_)` or `result.map",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or"
  },
  {
    "key": "clippy::match_as_ref",
    "name": "Checks for match which is used to add a reference to an `Option` value.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_as_ref"
  },
  {
    "key": "clippy::match_bool",
    "name": "Checks for matches where match expression is a `bool`. It suggests to replace the expression with an",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_bool"
  },
  {
    "key": "clippy::match_like_matches_macro",
    "name": "Checks for `match`  or `if let` expressions producing a `bool` that could be written using `matches!",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro"
  },
  {
    "key": "clippy::match_on_vec_items",
    "name": "Checks for `match vec[idx]` or `match vec[n..m]`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items"
  },
  {
    "key": "clippy::match_overlapping_arm",
    "name": "Checks for overlapping match arms.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_overlapping_arm"
  },
  {
    "key": "clippy::match_ref_pats",
    "name": "Checks for matches where all arms match a reference, suggesting to remove the reference and deref th",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_ref_pats"
  },
  {
    "key": "clippy::match_result_ok",
    "name": "Checks for unnecessary `ok()` in `while let`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_result_ok"
  },
  {
    "key": "clippy::match_same_arms",
    "name": "Checks for `match` with identical arm bodies.  Note: Does not lint on wildcards if the `non_exhausti",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms"
  },
  {
    "key": "clippy::match_single_binding",
    "name": "Checks for useless match that binds to only one value.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_single_binding"
  },
  {
    "key": "clippy::match_str_case_mismatch",
    "name": "Checks for `match` expressions modifying the case of a string with non-compliant arms",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_str_case_mismatch"
  },
  {
    "key": "clippy::match_wild_err_arm",
    "name": "Checks for arm which matches all errors with `Err(_)` and take drastic actions like `panic!`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm"
  },
  {
    "key": "clippy::match_wildcard_for_single_variants",
    "name": "Checks for wildcard enum matches for a single variant.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants"
  },
  {
    "key": "clippy::maybe_infinite_iter",
    "name": "Checks for iteration that may be infinite.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#maybe_infinite_iter"
  },
  {
    "key": "clippy::maybe_misused_cfg",
    "name": "Checks for `#[cfg(features = \"...\")]` and suggests to replace it with `#[cfg(feature = \"...\")]`.  It",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#maybe_misused_cfg"
  },
  {
    "key": "clippy::mem_forget",
    "name": "Checks for usage of `std::mem::forget(t)` where `t` is `Drop` or has a field that implements `Drop`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mem_forget"
  },
  {
    "key": "clippy::mem_replace_option_with_none",
    "name": "Checks for `mem::replace()` on an `Option` with `None`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_none"
  },
  {
    "key": "clippy::mem_replace_with_default",
    "name": "Checks for `std::mem::replace` on a value of type `T` with `T::default()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default"
  },
  {
    "key": "clippy::mem_replace_with_uninit",
    "name": "Checks for `mem::replace(&mut _, mem::uninitialized())` and `mem::replace(&mut _, mem::zeroed())`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_uninit"
  },
  {
    "key": "clippy::min_ident_chars",
    "name": "Checks for idents which comprise of a single letter.  Note: This lint can be very noisy when enabled",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars"
  },
  {
    "key": "clippy::min_max",
    "name": "Checks for expressions where `std::cmp::min` and `max` are used to clamp values, but switched so tha",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#min_max"
  },
  {
    "key": "clippy::mismatched_target_os",
    "name": "Checks for cfg attributes having operating systems used in target family position.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mismatched_target_os"
  },
  {
    "key": "clippy::mismatching_type_param_order",
    "name": "Checks for type parameters which are positioned inconsistently between a type definition and impl bl",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order"
  },
  {
    "key": "clippy::misnamed_getters",
    "name": "Checks for getter methods that return a field that doesn't correspond to the name of the method, whe",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#misnamed_getters"
  },
  {
    "key": "clippy::misrefactored_assign_op",
    "name": "Checks for `a op= a op b` or `a op= b op a` patterns.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op"
  },
  {
    "key": "clippy::missing_assert_message",
    "name": "Checks assertions without a custom panic message.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_assert_message"
  },
  {
    "key": "clippy::missing_asserts_for_indexing",
    "name": "Checks for repeated slice indexing without asserting beforehand that the length is greater than the",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_asserts_for_indexing"
  },
  {
    "key": "clippy::missing_const_for_fn",
    "name": "Suggests the use of `const` in functions and methods where possible.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn"
  },
  {
    "key": "clippy::missing_docs_in_private_items",
    "name": "Warns if there is missing doc for any private documentable item",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items"
  },
  {
    "key": "clippy::missing_enforced_import_renames",
    "name": "Checks for imports that do not rename the item as specified in the `enforced-import-renames` config",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames"
  },
  {
    "key": "clippy::missing_errors_doc",
    "name": "Checks the doc comments of publicly visible functions that return a `Result` type and warns if there",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc"
  },
  {
    "key": "clippy::missing_fields_in_debug",
    "name": "Checks for manual [`core::fmt::Debug`](https://doc.rust-lang.org/core/fmt/trait.Debug.html) implemen",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug"
  },
  {
    "key": "clippy::missing_inline_in_public_items",
    "name": "It lints if an exported function, method, trait method with default impl, or trait method impl is no",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items"
  },
  {
    "key": "clippy::missing_panics_doc",
    "name": "Checks the doc comments of publicly visible functions that may panic and warns if there is no `# Pan",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc"
  },
  {
    "key": "clippy::missing_safety_doc",
    "name": "Checks for the doc comments of publicly visible unsafe functions and warns if there is no `# Safety`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc"
  },
  {
    "key": "clippy::missing_spin_loop",
    "name": "Checks for empty spin loops",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_spin_loop"
  },
  {
    "key": "clippy::missing_trait_methods",
    "name": "Checks if a provided method is used implicitly by a trait implementation. A usage example would be a",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods"
  },
  {
    "key": "clippy::missing_transmute_annotations",
    "name": "Checks if transmute calls have all generics specified.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#missing_transmute_annotations"
  },
  {
    "key": "clippy::mistyped_literal_suffixes",
    "name": "Warns for mistyped suffix in literals",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes"
  },
  {
    "key": "clippy::mixed_attributes_style",
    "name": "Checks for items that have the same kind of attributes with mixed styles (inner/outer).",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mixed_attributes_style"
  },
  {
    "key": "clippy::mixed_case_hex_literals",
    "name": "Warns on hexadecimal literals with mixed-case letter digits.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals"
  },
  {
    "key": "clippy::mixed_read_write_in_expression",
    "name": "Checks for a read and a write to the same variable where whether the read occurs before or after the",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mixed_read_write_in_expression"
  },
  {
    "key": "clippy::mod_module_files",
    "name": "Checks that module layout uses only self named module files, bans `mod.rs` files.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mod_module_files"
  },
  {
    "key": "clippy::module_inception",
    "name": "Checks for modules that have the same name as their parent module",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#module_inception"
  },
  {
    "key": "clippy::module_name_repetitions",
    "name": "Detects type names that are prefixed or suffixed by the containing module's name.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions"
  },
  {
    "key": "clippy::modulo_arithmetic",
    "name": "Checks for modulo arithmetic.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#modulo_arithmetic"
  },
  {
    "key": "clippy::modulo_one",
    "name": "Checks for getting the remainder of a division by one or minus one.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#modulo_one"
  },
  {
    "key": "clippy::multi_assignments",
    "name": "Checks for nested assignments.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#multi_assignments"
  },
  {
    "key": "clippy::multiple_bound_locations",
    "name": "Check if a generic is defined both in the bound predicate and in the `where` clause.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations"
  },
  {
    "key": "clippy::multiple_crate_versions",
    "name": "Checks to see if multiple versions of a crate are being used.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions"
  },
  {
    "key": "clippy::multiple_inherent_impl",
    "name": "Checks for multiple inherent implementations of a struct",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#multiple_inherent_impl"
  },
  {
    "key": "clippy::multiple_unsafe_ops_per_block",
    "name": "Checks for `unsafe` blocks that contain more than one unsafe operation.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#multiple_unsafe_ops_per_block"
  },
  {
    "key": "clippy::must_use_candidate",
    "name": "Checks for public functions that have no `#[must_use]` attribute, but return something not already m",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate"
  },
  {
    "key": "clippy::must_use_unit",
    "name": "Checks for a `#[must_use]` attribute on unit-returning functions and methods.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#must_use_unit"
  },
  {
    "key": "clippy::mut_from_ref",
    "name": "This lint checks for functions that take immutable references and return mutable ones. This will not",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mut_from_ref"
  },
  {
    "key": "clippy::mut_mut",
    "name": "Checks for instances of `mut mut` references.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mut_mut"
  },
  {
    "key": "clippy::mut_mutex_lock",
    "name": "Checks for `&mut Mutex::lock` calls",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mut_mutex_lock"
  },
  {
    "key": "clippy::mut_range_bound",
    "name": "Checks for loops which have a range bound that is a mutable variable",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mut_range_bound"
  },
  {
    "key": "clippy::mutable_key_type",
    "name": "Checks for sets/maps with mutable key types.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key_type"
  },
  {
    "key": "clippy::mutex_atomic",
    "name": "Checks for usage of `Mutex<X>` where an atomic will do.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mutex_atomic"
  },
  {
    "key": "clippy::mutex_integer",
    "name": "Checks for usage of `Mutex<X>` where `X` is an integral type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#mutex_integer"
  },
  {
    "key": "clippy::naive_bytecount",
    "name": "Checks for naive byte counts",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#naive_bytecount"
  },
  {
    "key": "clippy::needless_arbitrary_self_type",
    "name": "The lint checks for `self` in fn parameters that specify the `Self`-type explicitly",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_arbitrary_self_type"
  },
  {
    "key": "clippy::needless_bitwise_bool",
    "name": "Checks for usage of bitwise and/or operators between booleans, where performance may be improved by",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_bitwise_bool"
  },
  {
    "key": "clippy::needless_bool",
    "name": "Checks for expressions of the form `if c { true } else { false }` (or vice versa) and suggests using",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool"
  },
  {
    "key": "clippy::needless_bool_assign",
    "name": "Checks for expressions of the form `if c { x = true } else { x = false }` (or vice versa) and sugges",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool_assign"
  },
  {
    "key": "clippy::needless_borrow",
    "name": "Checks for address of operations (`&`) that are going to be dereferenced immediately by the compiler",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow"
  },
  {
    "key": "clippy::needless_borrowed_reference",
    "name": "Checks for bindings that needlessly destructure a reference and borrow the inner value with `&ref`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference"
  },
  {
    "key": "clippy::needless_borrows_for_generic_args",
    "name": "Checks for borrow operations (`&`) that used as a generic argument to a function when the borrowed v",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args"
  },
  {
    "key": "clippy::needless_collect",
    "name": "Checks for functions collecting an iterator when collect is not needed.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect"
  },
  {
    "key": "clippy::needless_continue",
    "name": "The lint checks for `if`-statements appearing in loops that contain a `continue` statement in either",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue"
  },
  {
    "key": "clippy::needless_doctest_main",
    "name": "Checks for `fn main() { .. }` in doctests",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main"
  },
  {
    "key": "clippy::needless_else",
    "name": "Checks for empty `else` branches.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_else"
  },
  {
    "key": "clippy::needless_for_each",
    "name": "Checks for usage of `for_each` that would be more simply written as a `for` loop.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_for_each"
  },
  {
    "key": "clippy::needless_if",
    "name": "Checks for empty `if` branches with no else branch.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_if"
  },
  {
    "key": "clippy::needless_late_init",
    "name": "Checks for late initializations that can be replaced by a `let` statement with an initializer.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init"
  },
  {
    "key": "clippy::needless_lifetimes",
    "name": "Checks for lifetime annotations which can be removed by relying on lifetime elision.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes"
  },
  {
    "key": "clippy::needless_match",
    "name": "Checks for unnecessary `match` or match-like `if let` returns for `Option` and `Result` when functio",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_match"
  },
  {
    "key": "clippy::needless_option_as_deref",
    "name": "Checks for no-op uses of `Option::{as_deref, as_deref_mut}`, for example, `Option<&T>::as_deref()` r",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_as_deref"
  },
  {
    "key": "clippy::needless_option_take",
    "name": "Checks for calling `take` function after `as_ref`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_take"
  },
  {
    "key": "clippy::needless_parens_on_range_literals",
    "name": "The lint checks for parenthesis on literals in range statements that are superfluous.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_parens_on_range_literals"
  },
  {
    "key": "clippy::needless_pass_by_ref_mut",
    "name": "Check if a `&mut` function argument is actually used mutably.  Be careful if the function is publicl",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_ref_mut"
  },
  {
    "key": "clippy::needless_pass_by_value",
    "name": "Checks for functions taking arguments by value, but not consuming them in its body.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value"
  },
  {
    "key": "clippy::needless_pub_self",
    "name": "Checks for usage of `pub(self)` and `pub(in self)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_pub_self"
  },
  {
    "key": "clippy::needless_question_mark",
    "name": "Suggests alternatives for useless applications of `?` in terminating expressions",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark"
  },
  {
    "key": "clippy::needless_range_loop",
    "name": "Checks for looping over the range of `0..len` of some collection just to get the values by index.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop"
  },
  {
    "key": "clippy::needless_raw_string_hashes",
    "name": "Checks for raw string literals with an unnecessary amount of hashes around them.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_raw_string_hashes"
  },
  {
    "key": "clippy::needless_raw_strings",
    "name": "Checks for raw string literals where a string literal can be used instead.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_raw_strings"
  },
  {
    "key": "clippy::needless_return",
    "name": "Checks for return statements at the end of a block.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_return"
  },
  {
    "key": "clippy::needless_return_with_question_mark",
    "name": "Checks for return statements on `Err` paired with the `?` operator.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_return_with_question_mark"
  },
  {
    "key": "clippy::needless_splitn",
    "name": "Checks for usage of `str::splitn` (or `str::rsplitn`) where using `str::split` would be the same.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_splitn"
  },
  {
    "key": "clippy::needless_update",
    "name": "Checks for needlessly including a base struct on update when all fields are changed anyway.  This li",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_update"
  },
  {
    "key": "clippy::neg_cmp_op_on_partial_ord",
    "name": "Checks for the usage of negated comparison operators on types which only implement `PartialOrd` (e.g",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#neg_cmp_op_on_partial_ord"
  },
  {
    "key": "clippy::neg_multiply",
    "name": "Checks for multiplication by -1 as a form of negation.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#neg_multiply"
  },
  {
    "key": "clippy::negative_feature_names",
    "name": "Checks for negative feature names with prefix `no-` or `not-`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#negative_feature_names"
  },
  {
    "key": "clippy::never_loop",
    "name": "Checks for loops that will always `break`, `return` or `continue` an outer loop.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#never_loop"
  },
  {
    "key": "clippy::new_ret_no_self",
    "name": "Checks for `new` not returning a type that contains `Self`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#new_ret_no_self"
  },
  {
    "key": "clippy::new_without_default",
    "name": "Checks for public types with a `pub fn new() -> Self` method and no implementation of [`Default`](ht",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default"
  },
  {
    "key": "clippy::no_effect",
    "name": "Checks for statements which have no effect.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#no_effect"
  },
  {
    "key": "clippy::no_effect_replace",
    "name": "Checks for `replace` statements which have no effect.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_replace"
  },
  {
    "key": "clippy::no_effect_underscore_binding",
    "name": "Checks for binding to underscore prefixed variable without side-effects.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding"
  },
  {
    "key": "clippy::no_mangle_with_rust_abi",
    "name": "Checks for Rust ABI functions with the `#[no_mangle]` attribute.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi"
  },
  {
    "key": "clippy::non_ascii_literal",
    "name": "Checks for non-ASCII characters in string and char literals.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal"
  },
  {
    "key": "clippy::non_canonical_clone_impl",
    "name": "Checks for non-canonical implementations of `Clone` when `Copy` is already implemented.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl"
  },
  {
    "key": "clippy::non_canonical_partial_ord_impl",
    "name": "Checks for non-canonical implementations of `PartialOrd` when `Ord` is already implemented.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl"
  },
  {
    "key": "clippy::non_minimal_cfg",
    "name": "Checks for `any` and `all` combinators in `cfg` with only one condition.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg"
  },
  {
    "key": "clippy::non_octal_unix_permissions",
    "name": "Checks for non-octal values used to set Unix file permissions.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions"
  },
  {
    "key": "clippy::non_send_fields_in_send_ty",
    "name": "This lint warns about a `Send` implementation for a type that contains fields that are not safe to b",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty"
  },
  {
    "key": "clippy::nonminimal_bool",
    "name": "Checks for boolean expressions that can be written more concisely.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool"
  },
  {
    "key": "clippy::nonsensical_open_options",
    "name": "Checks for duplicate open options as well as combinations that make no sense.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options"
  },
  {
    "key": "clippy::nonstandard_macro_braces",
    "name": "Checks that common macros are used with consistent bracing.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces"
  },
  {
    "key": "clippy::not_unsafe_ptr_arg_deref",
    "name": "Checks for public functions that dereference raw pointer arguments but are not marked `unsafe`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref"
  },
  {
    "key": "clippy::obfuscated_if_else",
    "name": "Checks for usage of `.then_some(..).unwrap_or(..)`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#obfuscated_if_else"
  },
  {
    "key": "clippy::octal_escapes",
    "name": "Checks for `\\0` escapes in string and byte literals that look like octal character escapes in C.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#octal_escapes"
  },
  {
    "key": "clippy::ok_expect",
    "name": "Checks for usage of `ok().expect(..)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect"
  },
  {
    "key": "clippy::only_used_in_recursion",
    "name": "Checks for arguments that are only used in recursion with no side-effects.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion"
  },
  {
    "key": "clippy::op_ref",
    "name": "Checks for arguments to `==` which have their address taken to satisfy a bound and suggests to deref",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#op_ref"
  },
  {
    "key": "clippy::option_as_ref_cloned",
    "name": "Checks for usage of `.as_ref().cloned()` and `.as_mut().cloned()` on `Option`s",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_cloned"
  },
  {
    "key": "clippy::option_as_ref_deref",
    "name": "Checks for usage of `_.as_ref().map(Deref::deref)` or its aliases (such as String::as_str).",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref"
  },
  {
    "key": "clippy::option_env_unwrap",
    "name": "Checks for usage of `option_env!(...).unwrap()` and suggests usage of the `env!` macro.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_env_unwrap"
  },
  {
    "key": "clippy::option_filter_map",
    "name": "Checks for iterators of `Option`s using `.filter(Option::is_some).map(Option::unwrap)` that may be r",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_filter_map"
  },
  {
    "key": "clippy::option_if_let_else",
    "name": "Lints usage of `if let Some(v) = ... { y } else { x }` and `match .. { Some(v) => y, None/_ => x }`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else"
  },
  {
    "key": "clippy::option_map_or_err_ok",
    "name": "Checks for usage of `_.map_or(Err(_), Ok)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_err_ok"
  },
  {
    "key": "clippy::option_map_or_none",
    "name": "Checks for usage of `_.map_or(None, _)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none"
  },
  {
    "key": "clippy::option_map_unit_fn",
    "name": "Checks for usage of `option.map(f)` where f is a function or closure that returns the unit type `()`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn"
  },
  {
    "key": "clippy::option_option",
    "name": "Checks for usage of `Option<Option<_>>` in function signatures and type definitions",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#option_option"
  },
  {
    "key": "clippy::or_fun_call",
    "name": "Checks for calls to `.or(foo(..))`, `.unwrap_or(foo(..))`, `.or_insert(foo(..))` etc., and suggests",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call"
  },
  {
    "key": "clippy::or_then_unwrap",
    "name": "Checks for `.or(…).unwrap()` calls to Options and Results.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#or_then_unwrap"
  },
  {
    "key": "clippy::out_of_bounds_indexing",
    "name": "Checks for out of bounds array indexing with a constant index.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing"
  },
  {
    "key": "clippy::overflow_check_conditional",
    "name": "Detects classic underflow/overflow checks.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional"
  },
  {
    "key": "clippy::overly_complex_bool_expr",
    "name": "Checks for boolean expressions that contain terminals that can be eliminated.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#overly_complex_bool_expr"
  },
  {
    "key": "clippy::panic",
    "name": "Checks for usage of `panic!`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#panic"
  },
  {
    "key": "clippy::panic_in_result_fn",
    "name": "Checks for usage of `panic!` or assertions in a function of type result.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn"
  },
  {
    "key": "clippy::panicking_unwrap",
    "name": "Checks for calls of `unwrap[_err]()` that will always fail.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap"
  },
  {
    "key": "clippy::partial_pub_fields",
    "name": "Checks whether partial fields of a struct are public.  Either make all fields of a type public, or m",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#partial_pub_fields"
  },
  {
    "key": "clippy::partialeq_ne_impl",
    "name": "Checks for manual re-implementations of `PartialEq::ne`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl"
  },
  {
    "key": "clippy::partialeq_to_none",
    "name": "Checks for binary comparisons to a literal `Option::None`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_to_none"
  },
  {
    "key": "clippy::path_buf_push_overwrite",
    "name": "* Checks for [push](https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.push) calls on `Pa",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#path_buf_push_overwrite"
  },
  {
    "key": "clippy::path_ends_with_ext",
    "name": "Looks for calls to `Path::ends_with` calls where the argument looks like a file extension.  By defau",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#path_ends_with_ext"
  },
  {
    "key": "clippy::pattern_type_mismatch",
    "name": "Checks for patterns that aren't exact representations of the types they are applied to.  To satisfy",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch"
  },
  {
    "key": "clippy::permissions_set_readonly_false",
    "name": "Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#permissions_set_readonly_false"
  },
  {
    "key": "clippy::possible_missing_comma",
    "name": "Checks for possible missing comma in an array. It lints if an array element is a binary operator exp",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma"
  },
  {
    "key": "clippy::precedence",
    "name": "Checks for operations where precedence may be unclear and suggests to add parentheses. Currently it",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#precedence"
  },
  {
    "key": "clippy::print_in_format_impl",
    "name": "Checks for usage of `println`, `print`, `eprintln` or `eprint` in an implementation of a formatting",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#print_in_format_impl"
  },
  {
    "key": "clippy::print_literal",
    "name": "This lint warns about the use of literals as `print!`/`println!` args.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#print_literal"
  },
  {
    "key": "clippy::print_stderr",
    "name": "Checks for printing on *stderr*. The purpose of this lint is to catch debugging remnants.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#print_stderr"
  },
  {
    "key": "clippy::print_stdout",
    "name": "Checks for printing on *stdout*. The purpose of this lint is to catch debugging remnants.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout"
  },
  {
    "key": "clippy::print_with_newline",
    "name": "This lint warns when you use `print!()` with a format string that ends in a newline.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#print_with_newline"
  },
  {
    "key": "clippy::println_empty_string",
    "name": "This lint warns when you use `println!(\"\")` to print a newline.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#println_empty_string"
  },
  {
    "key": "clippy::ptr_arg",
    "name": "This lint checks for function arguments of type `&String`, `&Vec`, `&PathBuf`, and `Cow<_>`. It will",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg"
  },
  {
    "key": "clippy::ptr_as_ptr",
    "name": "Checks for `as` casts between raw pointers without changing its mutability, namely `*const T` to `*c",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr"
  },
  {
    "key": "clippy::ptr_cast_constness",
    "name": "Checks for `as` casts between raw pointers which change its constness, namely `*const T` to `*mut T`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness"
  },
  {
    "key": "clippy::ptr_eq",
    "name": "Use `std::ptr::eq` when applicable",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq"
  },
  {
    "key": "clippy::ptr_offset_with_cast",
    "name": "Checks for usage of the `offset` pointer method with a `usize` casted to an `isize`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast"
  },
  {
    "key": "clippy::pub_underscore_fields",
    "name": "Checks whether any field of the struct is prefixed with an `_` (underscore) and also marked `pub` (p",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields"
  },
  {
    "key": "clippy::pub_use",
    "name": "Restricts the usage of `pub use ...`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#pub_use"
  },
  {
    "key": "clippy::pub_with_shorthand",
    "name": "Checks for usage of `pub(<loc>)` with `in`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand"
  },
  {
    "key": "clippy::pub_without_shorthand",
    "name": "Checks for usage of `pub(<loc>)` without `in`.  Note: As you cannot write a module's path in `pub(<l",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#pub_without_shorthand"
  },
  {
    "key": "clippy::question_mark",
    "name": "Checks for expressions that could be replaced by the question mark operator.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#question_mark"
  },
  {
    "key": "clippy::question_mark_used",
    "name": "Checks for expressions that use the question mark operator and rejects them.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used"
  },
  {
    "key": "clippy::range_minus_one",
    "name": "Checks for inclusive ranges where 1 is subtracted from the upper bound, e.g., `x..=(y-1)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#range_minus_one"
  },
  {
    "key": "clippy::range_plus_one",
    "name": "Checks for exclusive ranges where 1 is added to the upper bound, e.g., `x..(y+1)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#range_plus_one"
  },
  {
    "key": "clippy::range_zip_with_len",
    "name": "Checks for zipping a collection with the range of `0.._.len()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len"
  },
  {
    "key": "clippy::rc_buffer",
    "name": "Checks for `Rc<T>` and `Arc<T>` when `T` is a mutable buffer type such as `String` or `Vec`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer"
  },
  {
    "key": "clippy::rc_clone_in_vec_init",
    "name": "Checks for reference-counted pointers (`Arc`, `Rc`, `rc::Weak`, and `sync::Weak`) in `vec![elem; len",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#rc_clone_in_vec_init"
  },
  {
    "key": "clippy::rc_mutex",
    "name": "Checks for `Rc<Mutex<T>>`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex"
  },
  {
    "key": "clippy::read_line_without_trim",
    "name": "Looks for calls to [`Stdin::read_line`] to read a line from the standard input into a string, then l",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#read_line_without_trim"
  },
  {
    "key": "clippy::read_zero_byte_vec",
    "name": "This lint catches reads into a zero-length `Vec`. Especially in the case of a call to `with_capacity",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#read_zero_byte_vec"
  },
  {
    "key": "clippy::readonly_write_lock",
    "name": "Looks for calls to `RwLock::write` where the lock is only used for reading.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#readonly_write_lock"
  },
  {
    "key": "clippy::recursive_format_impl",
    "name": "Checks for format trait implementations (e.g. `Display`) with a recursive call to itself which uses",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#recursive_format_impl"
  },
  {
    "key": "clippy::redundant_allocation",
    "name": "Checks for usage of redundant allocations anywhere in the code.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation"
  },
  {
    "key": "clippy::redundant_as_str",
    "name": "Checks for usage of `as_str()` on a `String` chained with a method available on the `String` itself.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_as_str"
  },
  {
    "key": "clippy::redundant_async_block",
    "name": "Checks for `async` block that only returns `await` on a future.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_async_block"
  },
  {
    "key": "clippy::redundant_at_rest_pattern",
    "name": "Checks for `[all @ ..]` patterns.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_at_rest_pattern"
  },
  {
    "key": "clippy::redundant_clone",
    "name": "Checks for a redundant `clone()` (and its relatives) which clones an owned value that is going to be",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone"
  },
  {
    "key": "clippy::redundant_closure",
    "name": "Checks for closures which just call another function where the function can be called directly. `uns",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure"
  },
  {
    "key": "clippy::redundant_closure_call",
    "name": "Detects closures called in the same expression where they are defined.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call"
  },
  {
    "key": "clippy::redundant_closure_for_method_calls",
    "name": "Checks for closures which only invoke a method on the closure argument and can be replaced by refere",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls"
  },
  {
    "key": "clippy::redundant_comparisons",
    "name": "Checks for ineffective double comparisons against constants.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_comparisons"
  },
  {
    "key": "clippy::redundant_else",
    "name": "Checks for `else` blocks that can be removed without changing semantics.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else"
  },
  {
    "key": "clippy::redundant_feature_names",
    "name": "Checks for feature names with prefix `use-`, `with-` or suffix `-support`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_feature_names"
  },
  {
    "key": "clippy::redundant_field_names",
    "name": "Checks for fields in struct literals where shorthands could be used.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names"
  },
  {
    "key": "clippy::redundant_guards",
    "name": "Checks for unnecessary guards in match expressions.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_guards"
  },
  {
    "key": "clippy::redundant_locals",
    "name": "Checks for redundant redefinitions of local bindings.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_locals"
  },
  {
    "key": "clippy::redundant_pattern",
    "name": "Checks for patterns in the form `name @ _`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern"
  },
  {
    "key": "clippy::redundant_pattern_matching",
    "name": "Lint for redundant pattern matching over `Result`, `Option`, `std::task::Poll`, `std::net::IpAddr` o",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching"
  },
  {
    "key": "clippy::redundant_pub_crate",
    "name": "Checks for items declared `pub(crate)` that are not crate visible because they are inside a private",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate"
  },
  {
    "key": "clippy::redundant_slicing",
    "name": "Checks for redundant slicing expressions which use the full range, and do not change the type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_slicing"
  },
  {
    "key": "clippy::redundant_static_lifetimes",
    "name": "Checks for constants and statics with an explicit `'static` lifetime.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes"
  },
  {
    "key": "clippy::redundant_type_annotations",
    "name": "Warns about needless / redundant type annotations.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#redundant_type_annotations"
  },
  {
    "key": "clippy::ref_as_ptr",
    "name": "Checks for casts of references to pointer using `as` and suggests `std::ptr::from_ref` and `std::ptr",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ref_as_ptr"
  },
  {
    "key": "clippy::ref_binding_to_reference",
    "name": "Checks for `ref` bindings which create a reference to a reference.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ref_binding_to_reference"
  },
  {
    "key": "clippy::ref_option_ref",
    "name": "Checks for usage of `&Option<&T>`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ref_option_ref"
  },
  {
    "key": "clippy::ref_patterns",
    "name": "Checks for usages of the `ref` keyword.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#ref_patterns"
  },
  {
    "key": "clippy::repeat_once",
    "name": "Checks for usage of `.repeat(1)` and suggest the following method for each types. - `.to_string()` f",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#repeat_once"
  },
  {
    "key": "clippy::repeat_vec_with_capacity",
    "name": "Looks for patterns such as `vec![Vec::with_capacity(x); n]` or `iter::repeat(Vec::with_capacity(x))`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#repeat_vec_with_capacity"
  },
  {
    "key": "clippy::reserve_after_initialization",
    "name": "Informs the user about a more concise way to create a vector with a known capacity.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#reserve_after_initialization"
  },
  {
    "key": "clippy::rest_pat_in_fully_bound_structs",
    "name": "Checks for unnecessary '..' pattern binding on struct when all fields are explicitly matched.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs"
  },
  {
    "key": "clippy::result_filter_map",
    "name": "Checks for iterators of `Result`s using `.filter(Result::is_ok).map(Result::unwrap)` that may be rep",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#result_filter_map"
  },
  {
    "key": "clippy::result_large_err",
    "name": "Checks for functions that return `Result` with an unusually large `Err`-variant.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#result_large_err"
  },
  {
    "key": "clippy::result_map_or_into_option",
    "name": "Checks for usage of `_.map_or(None, Some)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option"
  },
  {
    "key": "clippy::result_map_unit_fn",
    "name": "Checks for usage of `result.map(f)` where f is a function or closure that returns the unit type `()`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn"
  },
  {
    "key": "clippy::result_unit_err",
    "name": "Checks for public functions that return a `Result` with an `Err` type of `()`. It suggests using a c",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err"
  },
  {
    "key": "clippy::return_self_not_must_use",
    "name": "This lint warns when a method returning `Self` doesn't have the `#[must_use]` attribute.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use"
  },
  {
    "key": "clippy::reversed_empty_ranges",
    "name": "Checks for range expressions `x..y` where both `x` and `y` are constant and `x` is greater to `y`. A",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges"
  },
  {
    "key": "clippy::same_functions_in_if_condition",
    "name": "Checks for consecutive `if`s with the same function call.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition"
  },
  {
    "key": "clippy::same_item_push",
    "name": "Checks whether a for loop is being used to push a constant value into a Vec.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push"
  },
  {
    "key": "clippy::same_name_method",
    "name": "It lints if a struct has two methods with the same name: one from a trait, another not from trait.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#same_name_method"
  },
  {
    "key": "clippy::search_is_some",
    "name": "Checks for an iterator or string search (such as `find()`, `position()`, or `rposition()`) followed",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some"
  },
  {
    "key": "clippy::seek_from_current",
    "name": "Checks if the `seek` method of the `Seek` trait is called with `SeekFrom::Current(0)`, and if it is",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#seek_from_current"
  },
  {
    "key": "clippy::seek_to_start_instead_of_rewind",
    "name": "Checks for jumps to the start of a stream that implements `Seek` and uses the `seek` method providi",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#seek_to_start_instead_of_rewind"
  },
  {
    "key": "clippy::self_assignment",
    "name": "Checks for explicit self-assignments.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#self_assignment"
  },
  {
    "key": "clippy::self_named_constructors",
    "name": "Warns when constructors have the same name as their types.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors"
  },
  {
    "key": "clippy::self_named_module_files",
    "name": "Checks that module layout uses only `mod.rs` files.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files"
  },
  {
    "key": "clippy::semicolon_if_nothing_returned",
    "name": "Looks for blocks of expressions and fires if the last expression returns `()` but is not followed by",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned"
  },
  {
    "key": "clippy::semicolon_inside_block",
    "name": "Suggests moving the semicolon after a block to the inside of the block, after its last expression.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block"
  },
  {
    "key": "clippy::semicolon_outside_block",
    "name": "Suggests moving the semicolon from a block's final expression outside of the block.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block"
  },
  {
    "key": "clippy::separated_literal_suffix",
    "name": "Warns if literal suffixes are separated by an underscore. To enforce separated literal suffix style,",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix"
  },
  {
    "key": "clippy::serde_api_misuse",
    "name": "Checks for misuses of the serde API.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse"
  },
  {
    "key": "clippy::shadow_reuse",
    "name": "Checks for bindings that shadow other bindings already in scope, while reusing the original value.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"
  },
  {
    "key": "clippy::shadow_same",
    "name": "Checks for bindings that shadow other bindings already in scope, while just changing reference level",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same"
  },
  {
    "key": "clippy::shadow_unrelated",
    "name": "Checks for bindings that shadow other bindings already in scope, either without an initialization or",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated"
  },
  {
    "key": "clippy::short_circuit_statement",
    "name": "Checks for the use of short circuit boolean conditions as a statement.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#short_circuit_statement"
  },
  {
    "key": "clippy::should_implement_trait",
    "name": "Checks for methods that should live in a trait implementation of a `std` trait (see [llogiq's blog p",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait"
  },
  {
    "key": "clippy::should_panic_without_expect",
    "name": "Checks for `#[should_panic]` attributes without specifying the expected panic message.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#should_panic_without_expect"
  },
  {
    "key": "clippy::significant_drop_in_scrutinee",
    "name": "Checks for temporaries returned from function calls in a match scrutinee that have the `clippy::has_",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_in_scrutinee"
  },
  {
    "key": "clippy::significant_drop_tightening",
    "name": "Searches for elements marked with `#[clippy::has_significant_drop]` that could be early dropped but",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening"
  },
  {
    "key": "clippy::similar_names",
    "name": "Checks for names that are very similar and thus confusing.  Note: this lint looks for similar names",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#similar_names"
  },
  {
    "key": "clippy::single_call_fn",
    "name": "Checks for functions that are only used once. Does not lint tests.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn"
  },
  {
    "key": "clippy::single_char_add_str",
    "name": "Warns when using `push_str`/`insert_str` with a single-character string literal where `push`/`insert",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str"
  },
  {
    "key": "clippy::single_char_lifetime_names",
    "name": "Checks for lifetimes with names which are one character long.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_char_lifetime_names"
  },
  {
    "key": "clippy::single_char_pattern",
    "name": "Checks for string methods that receive a single-character `str` as an argument, e.g., `_.split(\"x\")`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern"
  },
  {
    "key": "clippy::single_component_path_imports",
    "name": "Checking for imports with single component use path.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_component_path_imports"
  },
  {
    "key": "clippy::single_element_loop",
    "name": "Checks whether a for loop has a single element.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_element_loop"
  },
  {
    "key": "clippy::single_match",
    "name": "Checks for matches with a single arm where an `if let` will usually suffice.  This intentionally doe",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_match"
  },
  {
    "key": "clippy::single_match_else",
    "name": "Checks for matches with two arms where an `if let else` will usually suffice.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else"
  },
  {
    "key": "clippy::single_range_in_vec_init",
    "name": "Checks for `Vec` or array initializations that contain only one range.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#single_range_in_vec_init"
  },
  {
    "key": "clippy::size_of_in_element_count",
    "name": "Detects expressions where `size_of::<T>` or `size_of_val::<T>` is used as a count of elements of typ",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#size_of_in_element_count"
  },
  {
    "key": "clippy::size_of_ref",
    "name": "Checks for calls to `std::mem::size_of_val()` where the argument is a reference to a reference.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#size_of_ref"
  },
  {
    "key": "clippy::skip_while_next",
    "name": "Checks for usage of `_.skip_while(condition).next()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next"
  },
  {
    "key": "clippy::slow_vector_initialization",
    "name": "Checks slow zero-filled vector initialization",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization"
  },
  {
    "key": "clippy::stable_sort_primitive",
    "name": "When sorting primitive values (integers, bools, chars, as well as arrays, slices, and tuples of such",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive"
  },
  {
    "key": "clippy::std_instead_of_alloc",
    "name": "Finds items imported through `std` when available through `alloc`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc"
  },
  {
    "key": "clippy::std_instead_of_core",
    "name": "Finds items imported through `std` when available through `core`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core"
  },
  {
    "key": "clippy::str_split_at_newline",
    "name": "Checks for usages of `str.trim().split(\"\\n\")` and `str.trim().split(\"\\r\\n\")`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#str_split_at_newline"
  },
  {
    "key": "clippy::str_to_string",
    "name": "This lint checks for `.to_string()` method calls on values of type `&str`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string"
  },
  {
    "key": "clippy::string_add",
    "name": "Checks for all instances of `x + _` where `x` is of type `String`, but only if [`string_add_assign`]",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#string_add"
  },
  {
    "key": "clippy::string_add_assign",
    "name": "Checks for string appends of the form `x = x + y` (without `let`!).",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#string_add_assign"
  },
  {
    "key": "clippy::string_extend_chars",
    "name": "Checks for the use of `.extend(s.chars())` where s is a `&str` or `String`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#string_extend_chars"
  },
  {
    "key": "clippy::string_from_utf8_as_bytes",
    "name": "Check if the string is transformed to byte array and casted back to string.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#string_from_utf8_as_bytes"
  },
  {
    "key": "clippy::string_lit_as_bytes",
    "name": "Checks for the `as_bytes` method called on string literals that contain only ASCII characters.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes"
  },
  {
    "key": "clippy::string_lit_chars_any",
    "name": "Checks for `<string_lit>.chars().any(|i| i == c)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_chars_any"
  },
  {
    "key": "clippy::string_slice",
    "name": "Checks for slice operations on strings",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#string_slice"
  },
  {
    "key": "clippy::string_to_string",
    "name": "This lint checks for `.to_string()` method calls on values of type `String`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string"
  },
  {
    "key": "clippy::strlen_on_c_strings",
    "name": "Checks for usage of `libc::strlen` on a `CString` or `CStr` value, and suggest calling `as_bytes().l",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#strlen_on_c_strings"
  },
  {
    "key": "clippy::struct_excessive_bools",
    "name": "Checks for excessive use of bools in structs.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools"
  },
  {
    "key": "clippy::struct_field_names",
    "name": "Detects struct fields that are prefixed or suffixed by the same characters or the name of the struct",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names"
  },
  {
    "key": "clippy::suboptimal_flops",
    "name": "Looks for floating-point expressions that can be expressed using built-in methods to improve both ac",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops"
  },
  {
    "key": "clippy::suspicious_arithmetic_impl",
    "name": "Lints for suspicious operations in impls of arithmetic operators, e.g. subtracting elements in an Ad",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl"
  },
  {
    "key": "clippy::suspicious_assignment_formatting",
    "name": "Checks for usage of the non-existent `=*`, `=!` and `=-` operators.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_assignment_formatting"
  },
  {
    "key": "clippy::suspicious_command_arg_space",
    "name": "Checks for `Command::arg()` invocations that look like they should be multiple arguments instead, s",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_command_arg_space"
  },
  {
    "key": "clippy::suspicious_doc_comments",
    "name": "Detects the use of outer doc comments (`///`, `/**`) followed by a bang (`!`): `///!`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_doc_comments"
  },
  {
    "key": "clippy::suspicious_else_formatting",
    "name": "Checks for formatting of `else`. It lints if the `else` is followed immediately by a newline or the",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_else_formatting"
  },
  {
    "key": "clippy::suspicious_map",
    "name": "Checks for calls to `map` followed by a `count`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_map"
  },
  {
    "key": "clippy::suspicious_op_assign_impl",
    "name": "Lints for suspicious operations in impls of OpAssign, e.g. subtracting elements in an AddAssign impl",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl"
  },
  {
    "key": "clippy::suspicious_open_options",
    "name": "Checks for the suspicious use of `OpenOptions::create()` without an explicit `OpenOptions::truncate(",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_open_options"
  },
  {
    "key": "clippy::suspicious_operation_groupings",
    "name": "Checks for unlikely usages of binary operators that are almost certainly typos and/or copy/paste err",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_operation_groupings"
  },
  {
    "key": "clippy::suspicious_splitn",
    "name": "Checks for calls to [`splitn`] (https://doc.rust-lang.org/std/primitive.str.html#method.splitn) and",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_splitn"
  },
  {
    "key": "clippy::suspicious_to_owned",
    "name": "Checks for the usage of `_.to_owned()`, on a `Cow<'_, _>`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_to_owned"
  },
  {
    "key": "clippy::suspicious_unary_op_formatting",
    "name": "Checks the formatting of a unary operator on the right hand side of a binary operator. It lints if t",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting"
  },
  {
    "key": "clippy::suspicious_xor_used_as_pow",
    "name": "Warns for a Bitwise XOR (`^`) operator being probably confused as a powering. It will not trigger if",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_xor_used_as_pow"
  },
  {
    "key": "clippy::swap_ptr_to_ref",
    "name": "Checks for calls to `core::mem::swap` where either parameter is derived from a pointer",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#swap_ptr_to_ref"
  },
  {
    "key": "clippy::tabs_in_doc_comments",
    "name": "Checks doc comments for usage of tab characters.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments"
  },
  {
    "key": "clippy::temporary_assignment",
    "name": "Checks for construction of a structure or tuple just to assign a value in it.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment"
  },
  {
    "key": "clippy::test_attr_in_doctest",
    "name": "Checks for `#[test]` in doctests unless they are marked with either `ignore`, `no_run` or `compile_f",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#test_attr_in_doctest"
  },
  {
    "key": "clippy::tests_outside_test_module",
    "name": "Triggers when a testing function (marked with the `#[test]` attribute) isn't inside a testing module",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#tests_outside_test_module"
  },
  {
    "key": "clippy::thread_local_initializer_can_be_made_const",
    "name": "Suggests to use `const` in `thread_local!` macro if possible.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#thread_local_initializer_can_be_made_const"
  },
  {
    "key": "clippy::to_digit_is_some",
    "name": "Checks for `.to_digit(..).is_some()` on `char`s.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#to_digit_is_some"
  },
  {
    "key": "clippy::to_string_in_format_args",
    "name": "Checks for [`ToString::to_string`](https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args"
  },
  {
    "key": "clippy::to_string_trait_impl",
    "name": "Checks for direct implementations of `ToString`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl"
  },
  {
    "key": "clippy::todo",
    "name": "Checks for usage of `todo!`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#todo"
  },
  {
    "key": "clippy::too_many_arguments",
    "name": "Checks for functions with too many parameters.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments"
  },
  {
    "key": "clippy::too_many_lines",
    "name": "Checks for functions with a large amount of lines.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines"
  },
  {
    "key": "clippy::toplevel_ref_arg",
    "name": "Checks for function arguments and let bindings denoted as `ref`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg"
  },
  {
    "key": "clippy::trailing_empty_array",
    "name": "Displays a warning when a struct with a trailing zero-sized array is declared without a `repr` attri",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#trailing_empty_array"
  },
  {
    "key": "clippy::trait_duplication_in_bounds",
    "name": "Checks for cases where generics or trait objects are being used and multiple syntax specifications f",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#trait_duplication_in_bounds"
  },
  {
    "key": "clippy::transmute_bytes_to_str",
    "name": "Checks for transmutes from a `&[u8]` to a `&str`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_bytes_to_str"
  },
  {
    "key": "clippy::transmute_float_to_int",
    "name": "Checks for transmutes from a float to an integer.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_float_to_int"
  },
  {
    "key": "clippy::transmute_int_to_bool",
    "name": "Checks for transmutes from an integer to a `bool`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool"
  },
  {
    "key": "clippy::transmute_int_to_char",
    "name": "Checks for transmutes from an integer to a `char`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char"
  },
  {
    "key": "clippy::transmute_int_to_float",
    "name": "Checks for transmutes from an integer to a float.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float"
  },
  {
    "key": "clippy::transmute_int_to_non_zero",
    "name": "Checks for transmutes from integers to `NonZero*` types, and suggests their `new_unchecked` method i",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_non_zero"
  },
  {
    "key": "clippy::transmute_null_to_fn",
    "name": "Checks for null function pointer creation through transmute.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_null_to_fn"
  },
  {
    "key": "clippy::transmute_num_to_bytes",
    "name": "Checks for transmutes from a number to an array of `u8`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_num_to_bytes"
  },
  {
    "key": "clippy::transmute_ptr_to_ptr",
    "name": "Checks for transmutes from a pointer to a pointer, or from a reference to a reference.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr"
  },
  {
    "key": "clippy::transmute_ptr_to_ref",
    "name": "Checks for transmutes from a pointer to a reference.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref"
  },
  {
    "key": "clippy::transmute_undefined_repr",
    "name": "Checks for transmutes between types which do not have a representation defined relative to each othe",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmute_undefined_repr"
  },
  {
    "key": "clippy::transmutes_expressible_as_ptr_casts",
    "name": "Checks for transmutes that could be a pointer cast.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmutes_expressible_as_ptr_casts"
  },
  {
    "key": "clippy::transmuting_null",
    "name": "Checks for transmute calls which would receive a null pointer.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#transmuting_null"
  },
  {
    "key": "clippy::trim_split_whitespace",
    "name": "Warns about calling `str::trim` (or variants) before `str::split_whitespace`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#trim_split_whitespace"
  },
  {
    "key": "clippy::trivial_regex",
    "name": "Checks for trivial [regex](https://crates.io/crates/regex) creation (with `Regex::new`, `RegexBuilde",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#trivial_regex"
  },
  {
    "key": "clippy::trivially_copy_pass_by_ref",
    "name": "Checks for functions taking arguments by reference, where the argument type is `Copy` and small enou",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref"
  },
  {
    "key": "clippy::try_err",
    "name": "Checks for usage of `Err(x)?`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#try_err"
  },
  {
    "key": "clippy::tuple_array_conversions",
    "name": "Checks for tuple<=>array conversions that are not done with `.into()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#tuple_array_conversions"
  },
  {
    "key": "clippy::type_complexity",
    "name": "Checks for types used in structs, parameters and `let` declarations above a certain complexity thres",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity"
  },
  {
    "key": "clippy::type_id_on_box",
    "name": "Looks for calls to `<Box<dyn Any> as Any>::type_id`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#type_id_on_box"
  },
  {
    "key": "clippy::type_repetition_in_bounds",
    "name": "This lint warns about unnecessary type repetitions in trait bounds",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds"
  },
  {
    "key": "clippy::unchecked_duration_subtraction",
    "name": "Lints subtraction between an `Instant` and a `Duration`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction"
  },
  {
    "key": "clippy::unconditional_recursion",
    "name": "Checks that there isn't an infinite recursion in trait implementations.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion"
  },
  {
    "key": "clippy::undocumented_unsafe_blocks",
    "name": "Checks for `unsafe` blocks and impls without a `// SAFETY: ` comment explaining why the unsafe opera",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks"
  },
  {
    "key": "clippy::unicode_not_nfc",
    "name": "Checks for string literals that contain Unicode in a form that is not equal to its [NFC-recompositio",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc"
  },
  {
    "key": "clippy::unimplemented",
    "name": "Checks for usage of `unimplemented!`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented"
  },
  {
    "key": "clippy::uninhabited_references",
    "name": "It detects references to uninhabited types, such as `!` and warns when those are either dereferenced",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#uninhabited_references"
  },
  {
    "key": "clippy::uninit_assumed_init",
    "name": "Checks for `MaybeUninit::uninit().assume_init()`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init"
  },
  {
    "key": "clippy::uninit_vec",
    "name": "Checks for `set_len()` call that creates `Vec` with uninitialized elements. This is commonly caused",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#uninit_vec"
  },
  {
    "key": "clippy::uninlined_format_args",
    "name": "Detect when a variable is not inlined in a format string, and suggests to inline it.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args"
  },
  {
    "key": "clippy::unit_arg",
    "name": "Checks for passing a unit value as an argument to a function without using a unit literal (`()`).",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg"
  },
  {
    "key": "clippy::unit_cmp",
    "name": "Checks for comparisons to unit. This includes all binary comparisons (like `==` and `<`) and asserts",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp"
  },
  {
    "key": "clippy::unit_hash",
    "name": "Detects `().hash(_)`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash"
  },
  {
    "key": "clippy::unit_return_expecting_ord",
    "name": "Checks for functions that expect closures of type Fn(...) -> Ord where the implemented closure retur",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord"
  },
  {
    "key": "clippy::unnecessary_box_returns",
    "name": "Checks for a return type containing a `Box<T>` where `T` implements `Sized`  The lint ignores `Box<",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_box_returns"
  },
  {
    "key": "clippy::unnecessary_cast",
    "name": "Checks for casts to the same type, casts of int literals to integer types, casts of float literals t",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast"
  },
  {
    "key": "clippy::unnecessary_clippy_cfg",
    "name": "Checks for `#[cfg_attr(clippy, allow(clippy::lint))]` and suggests to replace it with `#[allow(clipp",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_clippy_cfg"
  },
  {
    "key": "clippy::unnecessary_fallible_conversions",
    "name": "Checks for calls to `TryInto::try_into` and `TryFrom::try_from` when their infallible counterparts c",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions"
  },
  {
    "key": "clippy::unnecessary_filter_map",
    "name": "Checks for `filter_map` calls that could be replaced by `filter` or `map`. More specifically it chec",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map"
  },
  {
    "key": "clippy::unnecessary_find_map",
    "name": "Checks for `find_map` calls that could be replaced by `find` or `map`. More specifically it checks i",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_find_map"
  },
  {
    "key": "clippy::unnecessary_fold",
    "name": "Checks for usage of `fold` when a more succinct alternative exists. Specifically, this checks for `f",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fold"
  },
  {
    "key": "clippy::unnecessary_get_then_check",
    "name": "Checks the usage of `.get().is_some()` or `.get().is_none()` on std map types.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_get_then_check"
  },
  {
    "key": "clippy::unnecessary_join",
    "name": "Checks for usage of `.collect::<Vec<String>>().join(\"\")` on iterators.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_join"
  },
  {
    "key": "clippy::unnecessary_lazy_evaluations",
    "name": "As the counterpart to `or_fun_call`, this lint looks for unnecessary lazily evaluated closures on `O",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations"
  },
  {
    "key": "clippy::unnecessary_literal_unwrap",
    "name": "Checks for `.unwrap()` related calls on `Result`s and `Option`s that are constructed.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_literal_unwrap"
  },
  {
    "key": "clippy::unnecessary_map_on_constructor",
    "name": "Suggests removing the use of a `map()` (or `map_err()`) method when an `Option` or `Result` is being",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_on_constructor"
  },
  {
    "key": "clippy::unnecessary_mut_passed",
    "name": "Detects passing a mutable reference to a function that only requires an immutable reference.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed"
  },
  {
    "key": "clippy::unnecessary_operation",
    "name": "Checks for expression statements that can be reduced to a sub-expression.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation"
  },
  {
    "key": "clippy::unnecessary_owned_empty_strings",
    "name": "Detects cases of owned empty strings being passed as an argument to a function expecting `&str`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_owned_empty_strings"
  },
  {
    "key": "clippy::unnecessary_result_map_or_else",
    "name": "Checks for usage of `.map_or_else()` \"map closure\" for `Result` type.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_result_map_or_else"
  },
  {
    "key": "clippy::unnecessary_safety_comment",
    "name": "Checks for `// SAFETY: ` comments on safe code.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_comment"
  },
  {
    "key": "clippy::unnecessary_safety_doc",
    "name": "Checks for the doc comments of publicly visible safe functions and traits and warns if there is a `#",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_doc"
  },
  {
    "key": "clippy::unnecessary_self_imports",
    "name": "Checks for imports ending in `::{self}`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_self_imports"
  },
  {
    "key": "clippy::unnecessary_sort_by",
    "name": "Checks for usage of `Vec::sort_by` passing in a closure which compares the two arguments, either dir",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by"
  },
  {
    "key": "clippy::unnecessary_struct_initialization",
    "name": "Checks for initialization of a `struct` by copying a base without setting any field.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_struct_initialization"
  },
  {
    "key": "clippy::unnecessary_to_owned",
    "name": "Checks for unnecessary calls to [`ToOwned::to_owned`](https://doc.rust-lang.org/std/borrow/trait.ToO",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned"
  },
  {
    "key": "clippy::unnecessary_unwrap",
    "name": "Checks for calls of `unwrap[_err]()` that cannot fail.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap"
  },
  {
    "key": "clippy::unnecessary_wraps",
    "name": "Checks for private functions that only return `Ok` or `Some`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps"
  },
  {
    "key": "clippy::unneeded_field_pattern",
    "name": "Checks for structure field patterns bound to wildcards.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_field_pattern"
  },
  {
    "key": "clippy::unneeded_wildcard_pattern",
    "name": "Checks for tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`).  _NOTE_: W",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern"
  },
  {
    "key": "clippy::unnested_or_patterns",
    "name": "Checks for unnested or-patterns, e.g., `Some(0) | Some(2)` and suggests replacing the pattern with a",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns"
  },
  {
    "key": "clippy::unreachable",
    "name": "Checks for usage of `unreachable!`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unreachable"
  },
  {
    "key": "clippy::unreadable_literal",
    "name": "Warns if a long integral or floating-point constant does not contain underscores.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal"
  },
  {
    "key": "clippy::unsafe_derive_deserialize",
    "name": "Checks for deriving `serde::Deserialize` on a type that has methods using `unsafe`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_derive_deserialize"
  },
  {
    "key": "clippy::unsafe_removed_from_name",
    "name": "Checks for imports that remove \"unsafe\" from an item's name.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_removed_from_name"
  },
  {
    "key": "clippy::unseparated_literal_suffix",
    "name": "Warns if literal suffixes are not separated by an underscore. To enforce unseparated literal suffix",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix"
  },
  {
    "key": "clippy::unsound_collection_transmute",
    "name": "Checks for transmutes between collections whose types have different ABI, size or alignment.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unsound_collection_transmute"
  },
  {
    "key": "clippy::unused_async",
    "name": "Checks for functions that are declared `async` but have no `.await`s inside of them.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unused_async"
  },
  {
    "key": "clippy::unused_enumerate_index",
    "name": "Checks for uses of the `enumerate` method where the index is unused (`_`)",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unused_enumerate_index"
  },
  {
    "key": "clippy::unused_format_specs",
    "name": "Detects [formatting parameters] that have no effect on the output of `format!()`, `println!()` or si",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unused_format_specs"
  },
  {
    "key": "clippy::unused_io_amount",
    "name": "Checks for unused written/read amount.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount"
  },
  {
    "key": "clippy::unused_peekable",
    "name": "Checks for the creation of a `peekable` iterator that is never `.peek()`ed",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unused_peekable"
  },
  {
    "key": "clippy::unused_rounding",
    "name": "Detects cases where a whole-number literal float is being rounded, using the `floor`, `ceil`, or `r",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unused_rounding"
  },
  {
    "key": "clippy::unused_self",
    "name": "Checks methods that contain a `self` argument but don't use it",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unused_self"
  },
  {
    "key": "clippy::unused_unit",
    "name": "Checks for unit (`()`) expressions that can be removed.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit"
  },
  {
    "key": "clippy::unusual_byte_groupings",
    "name": "Warns if hexadecimal or binary literals are not grouped by nibble or byte.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unusual_byte_groupings"
  },
  {
    "key": "clippy::unwrap_in_result",
    "name": "Checks for functions of type `Result` that contain `expect()` or `unwrap()`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result"
  },
  {
    "key": "clippy::unwrap_or_default",
    "name": "Checks for usages of the following functions with an argument that constructs a default value (e.g.,",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default"
  },
  {
    "key": "clippy::unwrap_used",
    "name": "Checks for `.unwrap()` or `.unwrap_err()` calls on `Result`s and `.unwrap()` call on `Option`s.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used"
  },
  {
    "key": "clippy::upper_case_acronyms",
    "name": "Checks for fully capitalized names and optionally names containing a capitalized acronym.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms"
  },
  {
    "key": "clippy::use_debug",
    "name": "Checks for usage of `Debug` formatting. The purpose of this lint is to catch debugging remnants.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#use_debug"
  },
  {
    "key": "clippy::use_self",
    "name": "Checks for unnecessary repetition of structure name when a replacement with `Self` is applicable.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#use_self"
  },
  {
    "key": "clippy::used_underscore_binding",
    "name": "Checks for the use of bindings with a single leading underscore.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding"
  },
  {
    "key": "clippy::useless_asref",
    "name": "Checks for usage of `.as_ref()` or `.as_mut()` where the types before and after the call are the sam",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#useless_asref"
  },
  {
    "key": "clippy::useless_attribute",
    "name": "Checks for `extern crate` and `use` items annotated with lint attributes.  This lint permits lint at",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#useless_attribute"
  },
  {
    "key": "clippy::useless_conversion",
    "name": "Checks for `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` calls which uselessly convert to the",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion"
  },
  {
    "key": "clippy::useless_format",
    "name": "Checks for the use of `format!(\"string literal with no argument\")` and `format!(\"{}\", foo)` where `f",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#useless_format"
  },
  {
    "key": "clippy::useless_let_if_seq",
    "name": "Checks for variable declarations immediately followed by a conditional affectation.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq"
  },
  {
    "key": "clippy::useless_transmute",
    "name": "Checks for transmutes to the original type of the object and transmutes that could be a cast.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute"
  },
  {
    "key": "clippy::useless_vec",
    "name": "Checks for usage of `vec![..]` when using `[..]` would be possible.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec"
  },
  {
    "key": "clippy::vec_box",
    "name": "Checks for usage of `Vec<Box<T>>` where T: Sized anywhere in the code. Check the [Box documentation]",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#vec_box"
  },
  {
    "key": "clippy::vec_init_then_push",
    "name": "Checks for calls to `push` immediately after creating a new `Vec`.  If the `Vec` is created using `w",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#vec_init_then_push"
  },
  {
    "key": "clippy::vec_resize_to_zero",
    "name": "Finds occurrences of `Vec::resize(0, an_int)`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#vec_resize_to_zero"
  },
  {
    "key": "clippy::verbose_bit_mask",
    "name": "Checks for bit masks that can be replaced by a call to `trailing_zeros`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask"
  },
  {
    "key": "clippy::verbose_file_reads",
    "name": "Checks for usage of File::read_to_end and File::read_to_string.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#verbose_file_reads"
  },
  {
    "key": "clippy::waker_clone_wake",
    "name": "Checks for usage of `waker.clone().wake()`",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#waker_clone_wake"
  },
  {
    "key": "clippy::while_immutable_condition",
    "name": "Checks whether variables used within while loop condition can be (and are) mutated in the body.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#while_immutable_condition"
  },
  {
    "key": "clippy::while_let_loop",
    "name": "Detects `loop + match` combinations that are easier written as a `while let` loop.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop"
  },
  {
    "key": "clippy::while_let_on_iterator",
    "name": "Checks for `while let` expressions on iterators.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator"
  },
  {
    "key": "clippy::wildcard_dependencies",
    "name": "Checks for wildcard dependencies in the `Cargo.toml`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_dependencies"
  },
  {
    "key": "clippy::wildcard_enum_match_arm",
    "name": "Checks for wildcard enum matches using `_`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm"
  },
  {
    "key": "clippy::wildcard_imports",
    "name": "Checks for wildcard imports `use _::*`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports"
  },
  {
    "key": "clippy::wildcard_in_or_patterns",
    "name": "Checks for wildcard pattern used with others patterns in same match arm.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_in_or_patterns"
  },
  {
    "key": "clippy::write_literal",
    "name": "This lint warns about the use of literals as `write!`/`writeln!` args.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#write_literal"
  },
  {
    "key": "clippy::write_with_newline",
    "name": "This lint warns when you use `write!()` with a format string that ends in a newline.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#write_with_newline"
  },
  {
    "key": "clippy::writeln_empty_string",
    "name": "This lint warns when you use `writeln!(buf, \"\")` to print a newline.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#writeln_empty_string"
  },
  {
    "key": "clippy::wrong_self_convention",
    "name": "Checks for methods with certain name prefixes or suffixes, and which do not adhere to standard conve",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention"
  },
  {
    "key": "clippy::wrong_transmute",
    "name": "Checks for transmutes that can't ever be correct on any architecture.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#wrong_transmute"
  },
  {
    "key": "clippy::zero_divided_by_zero",
    "name": "Checks for `0.0 / 0.0`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#zero_divided_by_zero"
  },
  {
    "key": "clippy::zero_prefixed_literal",
    "name": "Warns if an integral constant literal starts with `0`.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal"
  },
  {
    "key": "clippy::zero_ptr",
    "name": "Catch casts from `0` to some pointer type",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr"
  },
  {
    "key": "clippy::zero_repeat_side_effects",
    "name": "Checks for array or vec initializations which call a function or method, but which have a repeat cou",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#zero_repeat_side_effects"
  },
  {
    "key": "clippy::zero_sized_map_values",
    "name": "Checks for maps with zero-sized value types anywhere in the code.",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#zero_sized_map_values"
  },
  {
    "key": "clippy::zst_offset",
    "name": "Checks for `offset(_)`, `wrapping_`{`add`, `sub`}, etc. on raw pointers to zero-sized types",
    "url": "https://rust-lang.github.io/rust-clippy/master/index.html#zst_offset"
  }
]
